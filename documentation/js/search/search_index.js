var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.885,1,1.672]],["body/modules/AppModule.html",[0,1.491,1,3.257,2,1.378,3,1.378,4,1.775,5,1.775,6,1.378,7,1.775,8,1.775,9,2.785,10,2.785,11,2.396,12,0.048,13,2.724,14,2.724,15,2.244,16,1.561,17,1.561,18,0.724,19,0.724,20,0.625,21,3.439,22,2.976,23,1.38,24,0.831,25,3.439,26,3.439,27,3.439,28,0.724,29,0.534,30,0.029,31,0.037,32,0.029]],["title/modules/ConfigModule.html",[0,0.885,11,1.285]],["body/modules/ConfigModule.html",[0,1.521,2,1.44,3,1.44,4,1.855,5,1.855,6,1.44,7,2.307,8,2.511,11,2.376,12,0.048,15,2.307,16,1.632,17,1.632,18,0.757,19,0.757,20,0.654,23,1.231,24,0.868,28,0.757,29,0.558,30,0.031,31,0.038,32,0.031,33,2.91,34,2.91,35,2.191,36,3.594,37,3.619,38,3.594,39,3.594,40,3.594,41,1.632,42,3.594]],["title/injectables/ConfigService.html",[35,1.134,43,0.684]],["body/injectables/ConfigService.html",[12,0.049,18,0.676,19,0.676,20,0.584,23,1.345,24,0.776,28,0.676,29,0.499,30,0.027,31,0.036,32,0.027,35,1.667,43,1.005,44,1.458,45,2.601,46,0.776,47,2.848,48,2.728,49,2.728,50,3.063,51,1.667,52,1.658,53,4.161,54,3.16,55,1.635,56,4.161,57,1.474,58,1.474,59,1.271,60,1.474,61,3.212,62,4.161,63,3.212,64,2.848,65,1.287,66,3.37,67,4.161,68,3.212,69,3.212,70,3.212,71,3.212,72,1.474,73,3.212,74,3.212]],["title/modules/DynamodbModule.html",[0,0.885,13,1.461]],["body/modules/DynamodbModule.html",[0,1.484,2,1.365,3,1.365,4,1.759,5,1.759,6,1.365,7,2.45,8,2.45,11,2.39,12,0.048,13,2.82,15,2.231,16,1.547,17,1.547,18,0.717,19,0.717,20,0.62,22,2.959,23,1.307,24,0.823,28,0.717,29,0.529,30,0.029,31,0.037,32,0.029,37,3.5,75,2.759,76,2.759,77,2.759,78,3.408,79,2.231,80,3.408,81,3.408,82,3.408]],["title/injectables/DynamodbService.html",[43,0.684,79,1.134]],["body/injectables/DynamodbService.html",[12,0.049,18,0.611,19,0.611,20,0.528,23,1.293,24,0.701,28,0.611,29,0.451,30,0.025,31,0.033,32,0.025,35,1.961,41,1.767,43,0.94,44,1.318,46,0.701,47,2.665,48,2.977,51,1.56,52,1.498,55,1.733,57,1.028,58,1.028,59,1.21,60,1.028,65,1.56,72,1.378,79,1.56,83,2.351,84,3.557,85,2.773,86,3.801,87,4.693,88,3.893,89,3.893,90,2.903,91,3.35,92,2.903,93,3.964,94,2.903,95,2.595,96,1.987,97,1.987,98,2.903,99,2.903,100,2.903,101,2.903,102,2.903,103,2.903,104,2.903,105,2.903,106,2.903,107,2.903,108,2.903,109,2.903,110,2.903,111,3.893,112,2.903,113,3.893]],["title/classes/DynamodbServiceMock.html",[29,0.439,114,1.937]],["body/classes/DynamodbServiceMock.html",[12,0.05,16,1.716,18,0.382,19,0.382,20,0.33,28,0.585,29,0.282,30,0.04,31,0.024,32,0.016,41,1.262,46,0.439,47,1.902,48,3.103,51,1.113,52,1.742,55,1.819,57,0.643,58,0.643,59,1.231,60,0.643,65,1.352,72,1.521,86,3.061,114,1.902,115,1.817,116,1.243,117,3.375,118,3.375,119,3.375,120,3.375,121,3.375,122,3.62,123,3.299,124,2.788,125,3.479,126,3.375,127,2.779,128,2.779,129,3.62,130,3.62,131,3.06,132,2.779,133,1.817,134,1.817,135,1.817,136,1.817,137,2.779,138,1.817,139,4.61,140,1.817,141,1.817,142,1.817,143,1.817,144,1.817,145,1.817,146,2.538,147,4.073,148,2.788,149,2.788,150,4.61,151,1.817,152,1.817,153,2.779,154,1.817,155,2.779,156,1.817,157,1.471,158,1.817,159,1.817,160,3.78,161,1.817,162,1.817,163,1.817,164,1.817,165,1.817,166,1.817,167,1.817,168,3.375,169,2.779,170,1.817,171,1.817,172,3.78,173,2.234,174,2.587,175,1.817,176,3.78,177,1.817,178,1.817,179,1.817,180,1.817,181,1.817,182,1.817]],["title/interfaces/EnvConfig.html",[50,1.672,183,1.672]],["body/interfaces/EnvConfig.html",[12,0.046,18,0.865,19,0.865,20,0.747,28,0.865,30,0.035,31,0.041,32,0.035,50,2.865,54,3.147,55,1.455,64,3.318,183,2.429,184,4.11,185,3.328,186,4.11,187,4.11]],["title/controllers/ForumController.html",[188,1.672,189,1.672]],["body/controllers/ForumController.html",[12,0.049,18,0.388,19,0.388,20,0.335,23,1.049,24,0.445,28,0.388,29,0.286,30,0.016,31,0.024,32,0.016,46,0.445,49,1.089,51,1.126,55,1.68,57,1.591,58,1.591,59,1.237,60,1.591,65,1.902,72,1.714,146,3.198,188,1.661,189,1.661,190,1.493,191,1.493,192,4.435,193,2.331,194,2.331,195,2.331,196,2.758,197,2.758,198,2.607,199,2.758,200,4.1,201,2.331,202,1.262,203,2.607,204,4.746,205,5.294,206,1.844,207,3.58,208,1.262,209,2.607,210,1.844,211,1.262,212,2.607,213,1.844,214,1.493,215,3.084,216,1.844,217,1.493,218,3.084,219,1.844,220,1.844,221,1.493,222,3.084,223,1.844,224,1.844,225,3.405,226,1.262,227,2.607,228,1.844,229,1.844,230,1.493,231,1.546,232,1.493,233,1.262,234,1.262,235,1.493,236,2.81,237,1.493,238,1.493,239,1.262,240,1.493,241,1.493,242,0.837,243,0.837,244,1.844,245,1.493,246,1.844,247,1.844,248,1.844,249,1.844,250,1.844,251,1.844,252,1.844,253,1.844,254,1.844,255,1.844,256,1.844,257,1.844]],["title/modules/ForumModule.html",[0,0.885,14,1.461]],["body/modules/ForumModule.html",[0,1.468,2,1.333,3,1.333,4,1.717,5,1.717,6,1.333,7,2.423,8,1.717,12,0.048,14,2.83,15,2.197,16,1.51,17,1.51,18,0.7,19,0.7,20,0.605,22,2.277,23,1.409,24,0.803,28,0.7,29,0.516,30,0.028,31,0.036,32,0.028,189,2.774,190,3.447,231,2.375,232,2.694,258,2.694,259,2.694,260,2.375,261,2.375,262,3.326,263,3.326,264,2.694,265,2.694]],["title/injectables/ForumPolice.html",[43,0.684,260,1.285]],["body/injectables/ForumPolice.html",[12,0.049,18,0.557,19,0.557,20,0.482,23,1.007,24,0.64,28,0.557,29,0.411,30,0.023,31,0.031,32,0.023,43,0.883,44,1.202,46,0.64,51,1.465,55,1.483,57,1.483,58,1.483,59,1.154,60,1.483,65,1.679,72,1.483,173,2.475,192,4.209,242,1.202,243,1.202,260,1.66,266,2.144,267,4.189,268,4.189,269,4.189,270,2.648,271,3.356,272,2.648,273,2.648,274,3.97,275,2.648,276,2.648,277,3.97,278,2.648,279,3.356,280,2.503,281,2.503,282,2.503,283,3.092,284,3.356,285,3.558,286,2.503,287,2.503,288,2.961,289,2.503,290,1.813,291,2.648,292,2.648,293,2.144,294,3.658,295,2.503,296,2.961,297,2.961]],["title/injectables/ForumRepository.html",[43,0.684,261,1.285]],["body/injectables/ForumRepository.html",[12,0.05,18,0.22,19,0.22,20,0.19,23,1.073,24,0.253,28,0.22,29,0.163,30,0.009,31,0.015,32,0.009,41,1.976,43,0.43,44,0.475,46,0.253,48,1.81,49,1.051,51,0.713,52,0.918,54,2.666,55,1.508,57,1.429,58,1.429,59,1.111,60,1.429,64,1.217,65,1.665,72,1.713,79,1.335,84,2.214,85,0.619,91,1.587,95,1.37,96,1.217,97,0.717,122,0.848,124,1.217,146,2.303,148,3.282,149,2.431,173,0.619,174,2.762,193,1.217,194,1.587,195,1.587,198,1.871,201,1.217,202,1.217,203,1.871,207,3.282,208,0.717,209,1.871,211,0.717,212,1.871,226,1.217,227,1.871,233,0.717,234,0.717,242,0.475,243,0.475,260,1.241,261,0.807,265,0.848,271,1.871,274,1.878,277,1.44,279,2.28,280,2.762,281,1.587,282,1.217,283,1.871,284,1.587,285,2.28,286,0.717,287,0.717,289,0.717,290,0.717,293,0.848,294,3.364,295,2.28,296,1.44,297,1.44,298,0.848,299,1.779,300,1.779,301,1.779,302,1.779,303,1.779,304,1.047,305,2.319,306,1.047,307,1.047,308,1.047,309,1.047,310,1.047,311,1.779,312,1.047,313,1.779,314,1.047,315,1.047,316,1.779,317,1.047,318,1.779,319,1.047,320,1.779,321,1.047,322,1.047,323,4.154,324,1.047,325,2.734,326,1.047,327,2.214,328,1.047,329,2.455,330,1.047,331,0.717,332,1.047,333,1.047,334,3.897,335,4.035,336,1.779,337,2.319,338,1.779,339,4.035,340,1.779,341,2.734,342,1.047,343,1.047,344,1.047,345,1.047,346,1.047,347,1.047,348,1.047,349,1.047,350,1.047,351,1.047,352,1.047,353,1.779,354,2.734,355,2.734,356,1.047,357,1.871,358,0.717,359,1.047,360,1.047,361,2.734,362,2.319,363,2.319,364,1.047,365,2.319,366,1.047,367,1.779,368,1.047,369,1.047,370,1.047,371,1.587,372,0.848,373,1.878,374,0.848,375,2.734,376,3.552,377,1.779,378,1.047,379,1.047,380,1.047,381,0.848,382,1.047,383,1.047,384,1.047,385,1.047,386,1.047,387,1.047,388,1.047,389,1.047,390,1.779,391,1.047,392,3.063,393,1.779,394,1.047,395,1.779,396,1.047,397,1.779,398,1.047,399,1.779,400,1.047,401,1.047,402,1.047,403,1.047,404,1.047,405,1.047,406,1.047,407,1.047,408,1.047]],["title/injectables/ForumService.html",[43,0.684,231,1.285]],["body/injectables/ForumService.html",[12,0.049,18,0.387,19,0.387,20,0.335,23,1.128,24,0.445,28,0.387,29,0.286,30,0.016,31,0.024,32,0.016,43,0.678,44,0.836,46,0.445,49,1.088,51,1.125,52,0.95,55,1.68,57,1.639,58,1.639,59,1.275,60,1.639,65,1.855,72,1.639,91,1.26,95,1.088,97,1.26,146,2.948,174,3.169,193,2.329,194,2.329,195,2.329,196,2.755,197,2.273,198,2.605,199,2.273,201,2.329,202,1.26,203,2.605,207,3.553,208,1.26,209,2.605,211,1.26,212,2.605,214,1.49,215,3.082,217,2.273,218,3.082,221,2.273,222,3.082,226,1.26,227,2.605,231,1.274,233,1.26,234,1.26,235,1.49,237,1.49,238,1.49,239,1.26,240,1.49,241,1.49,242,1.274,243,1.274,245,1.49,261,1.728,264,1.49,271,1.26,290,1.26,327,1.49,358,2.605,371,1.921,381,4.132,409,1.49,410,5.41,411,1.841,412,1.841,413,2.807,414,1.841,415,1.841,416,1.841,417,1.841,418,1.841,419,1.841,420,1.841,421,1.841,422,1.841,423,2.273,424,1.841,425,1.841,426,2.807,427,1.841,428,2.807,429,3.082,430,2.807,431,2.807,432,1.841,433,1.841,434,1.841,435,2.807,436,1.841,437,2.807,438,1.841,439,1.841,440,1.841,441,1.841]],["title/coverage.html",[442,3.099]],["body/coverage.html",[6,1.029,12,0.049,20,0.467,29,0.399,30,0.022,31,0.031,32,0.022,35,1.435,41,1.166,43,1.133,45,2.08,50,1.518,59,0.707,79,1.435,83,2.08,85,1.518,114,1.758,116,1.758,183,1.518,185,2.08,188,1.518,189,1.518,191,2.08,231,1.166,260,1.166,261,1.166,266,2.08,298,2.08,329,1.518,331,1.758,372,4.579,409,2.08,442,2.08,443,2.08,444,2.569,445,2.569,446,5.579,447,3.581,448,2.569,449,2.569,450,2.08,451,5.229,452,3.579,453,5.284,454,2.08,455,2.08,456,2.08,457,2.08,458,2.08,459,2.08,460,2.08,461,3.581,462,2.9,463,2.08,464,2.08,465,2.569,466,2.9,467,2.08,468,2.08,469,2.822,470,2.08,471,2.08,472,3.338,473,2.08,474,2.08,475,2.569,476,2.569]],["title/dependencies.html",[3,1.36,477,1.928]],["body/dependencies.html",[3,1.469,12,0.049,24,0.885,30,0.031,31,0.039,32,0.031,66,2.968,95,2.166,96,2.509,149,3.096,230,2.968,243,1.664,478,4.524,479,4.524,480,4.524,481,3.665,482,3.665,483,3.665,484,3.665,485,5.124,486,3.665,487,3.665,488,3.665,489,3.665,490,2.968,491,3.665,492,3.665,493,3.665,494,3.665,495,3.665,496,3.665,497,3.665,498,3.665,499,3.665,500,3.665]],["title/miscellaneous/enumerations.html",[501,1.081,502,2.749]],["body/miscellaneous/enumerations.html",[12,0.042,30,0.036,31,0.042,32,0.036,46,1.027,116,2.91,123,3.442,124,2.91,125,3.442,129,4.004,157,3.442,501,1.93,502,3.442,503,4.251]],["title/miscellaneous/functions.html",[501,1.081,504,2.749]],["body/miscellaneous/functions.html",[6,1.873,12,0.045,30,0.028,31,0.036,32,0.028,46,0.796,57,1.806,58,1.806,59,1.166,60,1.806,131,2.257,148,2.897,329,2.501,331,3.376,452,2.257,454,3.427,455,3.427,456,3.785,457,3.785,458,3.785,459,3.785,460,3.785,469,2.257,472,2.67,473,3.427,474,3.427,501,1.497,504,2.67,505,2.67,506,4.674,507,4.298,508,3.297,509,4.232,510,4.232,511,3.297,512,4.232,513,3.297,514,3.297,515,3.297,516,3.297,517,3.297]],["title/index.html",[46,0.575,518,1.928,519,1.928]],["body/index.html",[12,0.043,30,0.038,31,0.043,32,0.038,242,1.998,243,1.998]],["title/license.html",[518,1.928,519,1.928,520,1.928]],["body/license.html",[12,0.036,17,1.475,30,0.028,31,0.036,32,0.028,443,2.631,490,2.631,520,2.631,521,3.249,522,4.642,523,3.249,524,3.249,525,3.249,526,4.192,527,3.249,528,3.249,529,3.249,530,3.249,531,3.249,532,3.249,533,4.192,534,5.416,535,3.249,536,3.249,537,3.249,538,4.642,539,3.249,540,4.192,541,3.249,542,3.249,543,4.192,544,3.249,545,3.249,546,3.249,547,3.249,548,3.249,549,3.249,550,3.249,551,4.192,552,3.249,553,3.249,554,3.249,555,3.249,556,3.249,557,3.249,558,3.249,559,4.192,560,4.192,561,3.249,562,3.249,563,3.249,564,3.249,565,3.249,566,3.249,567,3.249,568,3.249,569,3.249,570,3.249,571,3.249,572,3.249,573,3.249,574,3.249,575,3.249,576,3.249,577,3.249,578,3.249,579,3.249,580,3.249,581,3.249,582,3.249,583,3.249,584,3.249,585,3.249,586,3.249,587,3.249,588,3.249,589,3.249]],["title/modules.html",[2,1.534]],["body/modules.html",[1,2.42,2,1.641,11,1.859,12,0.041,13,2.114,14,2.114,30,0.035,31,0.041,32,0.035,590,5.319,591,5.319,592,5.319,593,5.319]],["title/overview.html",[594,3.099]],["body/overview.html",[0,1.019,1,3.169,2,1.306,3,1.306,4,1.682,5,1.682,6,1.306,7,1.682,8,1.682,9,2.639,10,2.639,11,2.307,12,0.047,13,2.768,14,2.797,15,2.168,16,1.479,17,1.479,29,0.506,30,0.028,31,0.036,32,0.028,33,2.639,34,2.639,35,1.967,44,1.479,75,2.639,76,2.639,77,2.639,79,2.121,183,1.925,188,1.925,231,2.11,258,2.639,259,2.639,260,2.11,261,2.11,357,3.182,594,2.639,595,2.639,596,3.258]],["title/miscellaneous/variables.html",[501,1.081,597,2.749]],["body/miscellaneous/variables.html",[12,0.049,30,0.017,31,0.026,32,0.017,35,1.195,41,2.242,46,0.482,54,1.763,59,1.169,72,0.706,79,1.195,85,1.763,93,1.616,130,4,131,3.381,173,2.631,239,1.366,242,0.906,279,3.159,280,2.445,281,3.381,282,3.048,283,3.048,284,3.159,285,2.445,286,2.445,287,2.445,288,2.893,289,2.445,295,2.714,329,2.111,357,3.432,358,3.321,371,3.476,373,3.737,374,2.893,423,1.616,429,1.616,450,1.616,452,1.366,462,1.616,463,2.416,464,2.416,466,1.616,467,2.416,468,2.416,469,1.366,470,2.416,471,2.416,477,1.616,501,0.906,505,2.416,507,2.893,595,1.616,597,1.616,598,2.983,599,2.983,600,1.995,601,1.995,602,1.995,603,1.995,604,4.615,605,3.964,606,1.995,607,4.615,608,1.995,609,4.745,610,1.995,611,1.995,612,1.995,613,1.995,614,3.573,615,3.573,616,1.995,617,1.995,618,1.995,619,1.995,620,1.995,621,1.995,622,1.995,623,1.995,624,1.995,625,1.995,626,1.995,627,1.995,628,1.995,629,1.995,630,3.573,631,1.995,632,1.995,633,2.983,634,1.995]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"interfaces/EnvConfig.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":372,"title":{},"body":{"injectables/ForumRepository.html":{},"coverage.html":{}}}],["0.0.0.0:${grpcport",{"_index":625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["0.6.1",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["0.7.3",{"_index":480,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":446,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":461,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":465,"title":{},"body":{"coverage.html":{}}}],["0/16",{"_index":448,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":447,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":449,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":357,"title":{},"body":{"injectables/ForumRepository.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.24.6",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["101",{"_index":606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["102",{"_index":608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["103",{"_index":610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.890.0",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["2021",{"_index":524,"title":{},"body":{"license.html":{}}}],["3",{"_index":609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":498,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":595,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":596,"title":{},"body":{"overview.html":{}}}],["6.6.6",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_errorlevel",{"_index":117,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["above",{"_index":558,"title":{},"body":{"license.html":{}}}],["accesskeyid",{"_index":100,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["action",{"_index":583,"title":{},"body":{"license.html":{}}}],["all_attributes",{"_index":370,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["allowedenvnames",{"_index":470,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":549,"title":{},"body":{"license.html":{}}}],["annotations",{"_index":481,"title":{},"body":{"dependencies.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":587,"title":{},"body":{"license.html":{}}}],["associated",{"_index":535,"title":{},"body":{"license.html":{}}}],["async",{"_index":410,"title":{},"body":{"injectables/ForumService.html":{}}}],["attribute_not_exists(parentid",{"_index":352,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["author",{"_index":389,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["authors",{"_index":576,"title":{},"body":{"license.html":{}}}],["await",{"_index":381,"title":{},"body":{"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["aws",{"_index":95,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"dependencies.html":{}}}],["aws.config.update",{"_index":99,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["aws.dynamodb",{"_index":93,"title":{},"body":{"injectables/DynamodbService.html":{},"miscellaneous/variables.html":{}}}],["aws.dynamodb.documentclient",{"_index":112,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["aws/dynamodb",{"_index":478,"title":{},"body":{"dependencies.html":{}}}],["awserror",{"_index":323,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["boolean",{"_index":510,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":593,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":590,"title":{},"body":{"modules.html":{}}}],["c",{"_index":523,"title":{},"body":{"license.html":{}}}],["call",{"_index":151,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["callback",{"_index":147,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["callback(null",{"_index":176,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["callback(this.error",{"_index":172,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["categories",{"_index":423,"title":{},"body":{"injectables/ForumService.html":{},"miscellaneous/variables.html":{}}}],["category",{"_index":358,"title":{},"body":{"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/variables.html":{}}}],["categoryid",{"_index":280,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["categorylist",{"_index":463,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["charge",{"_index":530,"title":{},"body":{"license.html":{}}}],["claim",{"_index":579,"title":{},"body":{"license.html":{}}}],["class",{"_index":29,"title":{"classes/DynamodbServiceMock.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":115,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":33,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":34,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_dynamodbmodule",{"_index":75,"title":{},"body":{"modules/DynamodbModule.html":{},"overview.html":{}}}],["cluster_dynamodbmodule_exports",{"_index":76,"title":{},"body":{"modules/DynamodbModule.html":{},"overview.html":{}}}],["cluster_dynamodbmodule_imports",{"_index":78,"title":{},"body":{"modules/DynamodbModule.html":{}}}],["cluster_dynamodbmodule_providers",{"_index":77,"title":{},"body":{"modules/DynamodbModule.html":{},"overview.html":{}}}],["cluster_forummodule",{"_index":258,"title":{},"body":{"modules/ForumModule.html":{},"overview.html":{}}}],["cluster_forummodule_providers",{"_index":259,"title":{},"body":{"modules/ForumModule.html":{},"overview.html":{}}}],["comment",{"_index":402,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["commentid",{"_index":296,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{}}}],["comments",{"_index":435,"title":{},"body":{"injectables/ForumService.html":{}}}],["commentscount",{"_index":289,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["conditions",{"_index":557,"title":{},"body":{"license.html":{}}}],["config.interfaces",{"_index":68,"title":{},"body":{"injectables/ConfigService.html":{}}}],["config.service",{"_index":38,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":11,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":35,"title":{"injectables/ConfigService.html":{}},"body":{"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["configservice('.env",{"_index":616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["configservice(`.env",{"_index":42,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('aws_access_key_id",{"_index":101,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["configservice.get('aws_region",{"_index":107,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["configservice.get('aws_secret_access_key",{"_index":104,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["configservice.get('dynamodb_endpoint",{"_index":109,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["connection",{"_index":588,"title":{},"body":{"license.html":{}}}],["const",{"_index":174,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["constructor",{"_index":52,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["constructor(configservice",{"_index":88,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["constructor(dynamodbservice",{"_index":304,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["constructor(filepath",{"_index":53,"title":{},"body":{"injectables/ConfigService.html":{}}}],["constructor(private",{"_index":245,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["constructor(repository",{"_index":411,"title":{},"body":{"injectables/ForumService.html":{}}}],["content",{"_index":283,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":584,"title":{},"body":{"license.html":{}}}],["controller",{"_index":188,"title":{"controllers/ForumController.html":{}},"body":{"controllers/ForumController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":190,"title":{},"body":{"controllers/ForumController.html":{},"modules/ForumModule.html":{}}}],["copies",{"_index":551,"title":{},"body":{"license.html":{}}}],["copy",{"_index":533,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":522,"title":{},"body":{"license.html":{}}}],["correct",{"_index":386,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["count",{"_index":359,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["coverage",{"_index":442,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createdat",{"_index":284,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["createdby",{"_index":285,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["createpost",{"_index":193,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["createpost(payload",{"_index":202,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["createpostcomment",{"_index":194,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["createpostcomment(payload",{"_index":208,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["createpostreaction",{"_index":195,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["createpostreaction(payload",{"_index":211,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["currentlevel",{"_index":169,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["damages",{"_index":580,"title":{},"body":{"license.html":{}}}],["data",{"_index":149,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{},"dependencies.html":{}}}],["date().toisostring",{"_index":373,"title":{},"body":{"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["dbclient",{"_index":84,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{}}}],["dbclient_get",{"_index":118,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["dbclient_put",{"_index":119,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["dbclient_query",{"_index":120,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["dbclient_scan",{"_index":121,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["deal",{"_index":537,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":589,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}],["decorators",{"_index":204,"title":{},"body":{"controllers/ForumController.html":{}}}],["default",{"_index":130,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":331,"title":{},"body":{"injectables/ForumRepository.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["defaultvalue(payload.content",{"_index":400,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["defaultvalue(payload.excerpt",{"_index":394,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["defaultvalue(payload.poststate",{"_index":398,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["defaultvalue(payload.posttype",{"_index":396,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["defaultvalue(payload.title",{"_index":391,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["defaultvalue(value",{"_index":508,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defined",{"_index":55,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"interfaces/EnvConfig.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["delayms",{"_index":473,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["delayms(ms",{"_index":511,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":547,"title":{},"body":{"license.html":{}}}],["docs",{"_index":342,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["documentation",{"_index":443,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documentclient",{"_index":91,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["documentclient.getitemoutput",{"_index":338,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["documentclient.queryoutput",{"_index":355,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["dotenv",{"_index":66,"title":{},"body":{"injectables/ConfigService.html":{},"dependencies.html":{}}}],["dotenv.parse(fs.readfilesync(filepath",{"_index":70,"title":{},"body":{"injectables/ConfigService.html":{}}}],["dummyaccesskeyid",{"_index":102,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["dummysecretaccesskey",{"_index":105,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["dynamodb",{"_index":85,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dynamodb.service",{"_index":82,"title":{},"body":{"modules/DynamodbModule.html":{}}}],["dynamodb/dynamodb.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["dynamodbmodule",{"_index":13,"title":{"modules/DynamodbModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules.html":{},"overview.html":{}}}],["dynamodbservice",{"_index":79,"title":{"injectables/DynamodbService.html":{}},"body":{"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["dynamodbservice(configservice",{"_index":618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamodbservice.getdynamodb",{"_index":617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dynamodbservicemock",{"_index":114,"title":{"classes/DynamodbServiceMock.html":{}},"body":{"classes/DynamodbServiceMock.html":{},"coverage.html":{}}}],["empty",{"_index":353,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["endpoint",{"_index":108,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["enum",{"_index":156,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["enumerations",{"_index":502,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envconfig",{"_index":50,"title":{"interfaces/EnvConfig.html":{}},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["envnames",{"_index":515,"title":{},"body":{"miscellaneous/functions.html":{}}}],["err",{"_index":148,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{},"miscellaneous/functions.html":{}}}],["errlevel",{"_index":129,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"miscellaneous/enumerations.html":{}}}],["errlevel.all",{"_index":170,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["errlevel.none",{"_index":132,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["error",{"_index":122,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{}}}],["error('test",{"_index":137,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["error(`invalid",{"_index":388,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["errorlevel",{"_index":155,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["event",{"_index":575,"title":{},"body":{"license.html":{}}}],["example",{"_index":346,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["excerpt",{"_index":282,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"interfaces/EnvConfig.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}],["express",{"_index":490,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["expressionattributevalues",{"_index":354,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["false",{"_index":392,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["file",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"interfaces/EnvConfig.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{}}}],["filepath",{"_index":61,"title":{},"body":{"injectables/ConfigService.html":{}}}],["files",{"_index":536,"title":{},"body":{"license.html":{}}}],["filterexpression",{"_index":351,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["fitness",{"_index":571,"title":{},"body":{"license.html":{}}}],["following",{"_index":556,"title":{},"body":{"license.html":{}}}],["forum",{"_index":626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forum.controller",{"_index":263,"title":{},"body":{"modules/ForumModule.html":{}}}],["forum.police",{"_index":265,"title":{},"body":{"modules/ForumModule.html":{},"injectables/ForumRepository.html":{}}}],["forum.repository",{"_index":264,"title":{},"body":{"modules/ForumModule.html":{},"injectables/ForumService.html":{}}}],["forum.service",{"_index":232,"title":{},"body":{"controllers/ForumController.html":{},"modules/ForumModule.html":{}}}],["forum/forum.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["forumcontroller",{"_index":189,"title":{"controllers/ForumController.html":{}},"body":{"controllers/ForumController.html":{},"modules/ForumModule.html":{},"coverage.html":{}}}],["forummodule",{"_index":14,"title":{"modules/ForumModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ForumModule.html":{},"modules.html":{},"overview.html":{}}}],["forumpolice",{"_index":260,"title":{"injectables/ForumPolice.html":{}},"body":{"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"coverage.html":{},"overview.html":{}}}],["forumrepository",{"_index":261,"title":{"injectables/ForumRepository.html":{}},"body":{"modules/ForumModule.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"overview.html":{}}}],["forumservice",{"_index":231,"title":{"injectables/ForumService.html":{}},"body":{"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumService.html":{},"coverage.html":{},"overview.html":{}}}],["free",{"_index":529,"title":{},"body":{"license.html":{}}}],["fs",{"_index":67,"title":{},"body":{"injectables/ConfigService.html":{}}}],["full",{"_index":615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":453,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":504,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":554,"title":{},"body":{"license.html":{}}}],["get(key",{"_index":62,"title":{},"body":{"injectables/ConfigService.html":{}}}],["getcategory",{"_index":196,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["getcategory(payload",{"_index":214,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["getcategorybyid",{"_index":299,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["getcategorybyid(categoryid",{"_index":311,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["getdbclient",{"_index":86,"title":{},"body":{"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{}}}],["getdynamodb",{"_index":87,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["getpost",{"_index":197,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["getpost(payload",{"_index":217,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["getpostbyid",{"_index":300,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["getpostbyid(postid",{"_index":313,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["getting",{"_index":518,"title":{"index.html":{},"license.html":{}},"body":{}}],["global",{"_index":37,"title":{},"body":{"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{}}}],["granted",{"_index":528,"title":{},"body":{"license.html":{}}}],["grpc",{"_index":243,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"dependencies.html":{},"index.html":{}}}],["grpc.proto",{"_index":629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grpc/proto",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["grpcmethod",{"_index":229,"title":{},"body":{"controllers/ForumController.html":{}}}],["grpcmethod('forumservice",{"_index":205,"title":{},"body":{"controllers/ForumController.html":{}}}],["grpcoptions",{"_index":620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grpcport",{"_index":467,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["guide/dynamodb",{"_index":345,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["hereby",{"_index":527,"title":{},"body":{"license.html":{}}}],["holders",{"_index":577,"title":{},"body":{"license.html":{}}}],["https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/expressions.operatorsandfunctions.html",{"_index":349,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["https://docs.aws.amazon.com/sdk",{"_index":343,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["icategory",{"_index":327,"title":{},"body":{"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["icreatepost_request",{"_index":203,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["icreatepost_response",{"_index":235,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["icreatepostcomment_request",{"_index":209,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["icreatepostcomment_response",{"_index":233,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["icreatepostreaction_request",{"_index":212,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["icreatepostreaction_response",{"_index":234,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["id",{"_index":279,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":444,"title":{},"body":{"coverage.html":{}}}],["iforumclient",{"_index":236,"title":{},"body":{"controllers/ForumController.html":{}}}],["igetcategory_request",{"_index":215,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["igetcategory_response",{"_index":237,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["igetpost_request",{"_index":218,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["igetpost_response",{"_index":238,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["ilistcategories_request",{"_index":249,"title":{},"body":{"controllers/ForumController.html":{}}}],["ilistmaincategories_response",{"_index":239,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{},"miscellaneous/variables.html":{}}}],["ilistposts_request",{"_index":222,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["ilistposts_response",{"_index":240,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["implements",{"_index":244,"title":{},"body":{"controllers/ForumController.html":{}}}],["implied",{"_index":567,"title":{},"body":{"license.html":{}}}],["import",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["imports",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{}}}],["included",{"_index":561,"title":{},"body":{"license.html":{}}}],["including",{"_index":540,"title":{},"body":{"license.html":{}}}],["index",{"_index":46,"title":{"index.html":{}},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":186,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["indexname",{"_index":363,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["info",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"interfaces/EnvConfig.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["injectable",{"_index":43,"title":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{}}}],["injectables",{"_index":44,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"overview.html":{}}}],["inside",{"_index":612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":183,"title":{"interfaces/EnvConfig.html":{}},"body":{"interfaces/EnvConfig.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":184,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["iping_response",{"_index":225,"title":{},"body":{"controllers/ForumController.html":{}}}],["ipost",{"_index":271,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["ipostcomment",{"_index":274,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{}}}],["ipostlist",{"_index":613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ipostreaction",{"_index":277,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{}}}],["iposttype",{"_index":422,"title":{},"body":{"injectables/ForumService.html":{}}}],["item",{"_index":376,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["items",{"_index":356,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["iupdatepost_request",{"_index":227,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["iupdatepost_response",{"_index":241,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["javascript/v2/developer",{"_index":344,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["jest.fn",{"_index":160,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["jest.mock",{"_index":139,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["join(__dirname",{"_index":628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":64,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/ForumRepository.html":{}}}],["keyconditionexpression",{"_index":365,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["kind",{"_index":566,"title":{},"body":{"license.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}],["liability",{"_index":581,"title":{},"body":{"license.html":{}}}],["liable",{"_index":578,"title":{},"body":{"license.html":{}}}],["license",{"_index":520,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":541,"title":{},"body":{"license.html":{}}}],["limited",{"_index":568,"title":{},"body":{"license.html":{}}}],["listcategories",{"_index":248,"title":{},"body":{"controllers/ForumController.html":{}}}],["listmaincategories",{"_index":198,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["listpostcomments",{"_index":301,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["listpostcomments(postid",{"_index":316,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["listposts",{"_index":199,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["listposts(payload",{"_index":221,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["listpostsbycategoryid",{"_index":302,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["listpostsbycategoryid(categoryid",{"_index":318,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["listsubcategories",{"_index":303,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["listsubcategories(categoryid",{"_index":320,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["loader",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["local",{"_index":601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":471,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger('main",{"_index":603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logtablecreated",{"_index":454,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["logtablecreated(tablename",{"_index":516,"title":{},"body":{"miscellaneous/functions.html":{}}}],["logtableerror",{"_index":455,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["logtableerror(tablename",{"_index":517,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mapper",{"_index":479,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"interfaces/EnvConfig.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":570,"title":{},"body":{"license.html":{}}}],["merge",{"_index":545,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":51,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["microenv",{"_index":525,"title":{},"body":{"license.html":{}}}],["microserviceoptions",{"_index":468,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":501,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":521,"title":{},"body":{"license.html":{}}}],["modify",{"_index":544,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"modules.html":{},"overview.html":{}}}],["ms",{"_index":513,"title":{},"body":{"miscellaneous/functions.html":{}}}],["msforum",{"_index":242,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":58,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/functions.html":{}}}],["nestjs/common",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":230,"title":{},"body":{"controllers/ForumController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":41,"title":{},"body":{"modules/ConfigModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["none",{"_index":157,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":574,"title":{},"body":{"license.html":{}}}],["notice",{"_index":559,"title":{},"body":{"license.html":{}}}],["null",{"_index":173,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":512,"title":{},"body":{"miscellaneous/functions.html":{}}}],["obtaining",{"_index":532,"title":{},"body":{"license.html":{}}}],["open",{"_index":374,"title":{},"body":{"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["operators",{"_index":348,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["optional",{"_index":60,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":586,"title":{},"body":{"license.html":{}}}],["out",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":594,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":477,"title":{"dependencies.html":{}},"body":{"miscellaneous/variables.html":{}}}],["parameters",{"_index":57,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/functions.html":{}}}],["parentid",{"_index":295,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["particular",{"_index":572,"title":{},"body":{"license.html":{}}}],["payload",{"_index":146,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["permission",{"_index":526,"title":{},"body":{"license.html":{}}}],["permit",{"_index":552,"title":{},"body":{"license.html":{}}}],["person",{"_index":531,"title":{},"body":{"license.html":{}}}],["persons",{"_index":553,"title":{},"body":{"license.html":{}}}],["ping",{"_index":200,"title":{},"body":{"controllers/ForumController.html":{}}}],["police",{"_index":305,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["pong",{"_index":246,"title":{},"body":{"controllers/ForumController.html":{}}}],["portions",{"_index":563,"title":{},"body":{"license.html":{}}}],["post",{"_index":371,"title":{},"body":{"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/variables.html":{}}}],["post.content",{"_index":399,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["post.excerpt",{"_index":393,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["post.poststate",{"_index":397,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["post.posttype",{"_index":395,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["post.title",{"_index":390,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["postid",{"_index":294,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{}}}],["postlist",{"_index":464,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["posts",{"_index":429,"title":{},"body":{"injectables/ForumService.html":{},"miscellaneous/variables.html":{}}}],["postscount",{"_index":605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["poststate",{"_index":286,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["posttype",{"_index":287,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix.charat(prefix.length",{"_index":632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix}${tablename",{"_index":634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preservefalsy",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{}}}],["private",{"_index":48,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{}}}],["process.env",{"_index":71,"title":{},"body":{"injectables/ConfigService.html":{}}}],["process.env.dynamodb_tables_prefix",{"_index":631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.grpc_port",{"_index":619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env[key",{"_index":73,"title":{},"body":{"injectables/ConfigService.html":{}}}],["production",{"_index":602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":207,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["promise((resolve",{"_index":334,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["promise(async",{"_index":379,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["promise.resolve",{"_index":431,"title":{},"body":{"injectables/ForumService.html":{}}}],["properties",{"_index":47,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{}}}],["protopath",{"_index":627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provide",{"_index":39,"title":{},"body":{"modules/ConfigModule.html":{}}}],["provided",{"_index":564,"title":{},"body":{"license.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}],["public",{"_index":192,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumPolice.html":{}}}],["publish",{"_index":546,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":573,"title":{},"body":{"license.html":{}}}],["put",{"_index":123,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"miscellaneous/enumerations.html":{}}}],["query",{"_index":124,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{},"miscellaneous/enumerations.html":{}}}],["reaction",{"_index":405,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["reactions",{"_index":437,"title":{},"body":{"injectables/ForumService.html":{}}}],["reacttype",{"_index":297,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{}}}],["readonly",{"_index":49,"title":{},"body":{"injectables/ConfigService.html":{},"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["reflect",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["region",{"_index":106,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["reject",{"_index":335,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["reject(err",{"_index":339,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["reject(new",{"_index":387,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["repository",{"_index":413,"title":{},"body":{"injectables/ForumService.html":{}}}],["requiredenvs",{"_index":474,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requiredenvs(envnames",{"_index":514,"title":{},"body":{"miscellaneous/functions.html":{}}}],["reset",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"classes/DynamodbServiceMock.html":{},"modules/ForumModule.html":{},"overview.html":{}}}],["resolve",{"_index":380,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["resolve(comment",{"_index":404,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["resolve(data.item",{"_index":340,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["resolve(data.items",{"_index":361,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["resolve(item",{"_index":401,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["resolve(post",{"_index":378,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["resolve(reaction",{"_index":408,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["restriction",{"_index":539,"title":{},"body":{"license.html":{}}}],["result",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"interfaces/EnvConfig.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"interfaces/EnvConfig.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":72,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":65,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["rights",{"_index":542,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":456,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["rxjs",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["sanitizepost",{"_index":267,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["sanitizepost(undefined",{"_index":270,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["sanitizepostcomment",{"_index":268,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["sanitizepostcomment(undefined",{"_index":273,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["sanitizepostreaction",{"_index":269,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["sanitizepostreaction(undefined",{"_index":276,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["scan",{"_index":125,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"miscellaneous/enumerations.html":{}}}],["scan.html",{"_index":347,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["scannedcount",{"_index":360,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["sdk",{"_index":96,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{},"dependencies.html":{}}}],["sdk/clients/dynamodb",{"_index":97,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["secretaccesskey",{"_index":103,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["select",{"_index":369,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["sell",{"_index":550,"title":{},"body":{"license.html":{}}}],["seterrorlevel",{"_index":127,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["seterrorlevel(errorlevel",{"_index":153,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["shall",{"_index":560,"title":{},"body":{"license.html":{}}}],["shouldtriggererror",{"_index":126,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["software",{"_index":534,"title":{},"body":{"license.html":{}}}],["source",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"injectables/ConfigService.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"interfaces/EnvConfig.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["src/.../dynamodb.service.mock.ts",{"_index":503,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../dynamodb.utils.ts",{"_index":600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../forum.mock.ts",{"_index":598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../grpc.options.ts",{"_index":599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":505,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../migrations.ts",{"_index":507,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":506,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["src/config/config.interfaces.ts",{"_index":185,"title":{},"body":{"interfaces/EnvConfig.html":{},"coverage.html":{}}}],["src/config/config.interfaces.ts:1",{"_index":187,"title":{},"body":{"interfaces/EnvConfig.html":{}}}],["src/config/config.module",{"_index":81,"title":{},"body":{"modules/DynamodbModule.html":{}}}],["src/config/config.module.ts",{"_index":36,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/config/config.service",{"_index":98,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["src/config/config.service.ts",{"_index":45,"title":{},"body":{"injectables/ConfigService.html":{},"coverage.html":{}}}],["src/config/config.service.ts:14",{"_index":63,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/config/config.service.ts:8",{"_index":56,"title":{},"body":{"injectables/ConfigService.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts",{"_index":116,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:11",{"_index":140,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:12",{"_index":143,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:13",{"_index":142,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:14",{"_index":141,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:15",{"_index":138,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:17",{"_index":128,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:23",{"_index":152,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:30",{"_index":145,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:39",{"_index":154,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:43",{"_index":144,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:49",{"_index":133,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:61",{"_index":136,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:73",{"_index":135,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:85",{"_index":134,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/dynamodb.module.ts",{"_index":80,"title":{},"body":{"modules/DynamodbModule.html":{}}}],["src/dynamodb/dynamodb.service",{"_index":328,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/dynamodb/dynamodb.service.ts",{"_index":83,"title":{},"body":{"injectables/DynamodbService.html":{},"coverage.html":{}}}],["src/dynamodb/dynamodb.service.ts:26",{"_index":90,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["src/dynamodb/dynamodb.service.ts:30",{"_index":92,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["src/dynamodb/dynamodb.service.ts:8",{"_index":94,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["src/dynamodb/dynamodb.service.ts:9",{"_index":89,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["src/dynamodb/dynamodb.utils",{"_index":330,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/dynamodb/dynamodb.utils.ts",{"_index":450,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/dynamodb/migrations.ts",{"_index":452,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/forum/forum.controller.ts",{"_index":191,"title":{},"body":{"controllers/ForumController.html":{},"coverage.html":{}}}],["src/forum/forum.controller.ts:29",{"_index":224,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:34",{"_index":220,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:46",{"_index":216,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:53",{"_index":223,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:60",{"_index":219,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:67",{"_index":206,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:74",{"_index":210,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:81",{"_index":213,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:88",{"_index":228,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.mock.ts",{"_index":462,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/forum/forum.module.ts",{"_index":262,"title":{},"body":{"modules/ForumModule.html":{}}}],["src/forum/forum.police.ts",{"_index":266,"title":{},"body":{"injectables/ForumPolice.html":{},"coverage.html":{}}}],["src/forum/forum.police.ts:36",{"_index":275,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["src/forum/forum.police.ts:54",{"_index":278,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["src/forum/forum.police.ts:6",{"_index":272,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["src/forum/forum.repository.ts",{"_index":298,"title":{},"body":{"injectables/ForumRepository.html":{},"coverage.html":{}}}],["src/forum/forum.repository.ts:107",{"_index":321,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:129",{"_index":319,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:151",{"_index":317,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:174",{"_index":307,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:207",{"_index":322,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:23",{"_index":306,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:240",{"_index":308,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:273",{"_index":309,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:29",{"_index":310,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:33",{"_index":312,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:53",{"_index":314,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:75",{"_index":315,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.service.ts",{"_index":409,"title":{},"body":{"injectables/ForumService.html":{},"coverage.html":{}}}],["src/forum/forum.service.ts:101",{"_index":421,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:30",{"_index":412,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:33",{"_index":419,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:41",{"_index":417,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:59",{"_index":420,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:69",{"_index":418,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:83",{"_index":414,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:89",{"_index":415,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:95",{"_index":416,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/grpc.options.ts",{"_index":466,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":469,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils",{"_index":332,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/utils.ts",{"_index":472,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":519,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":445,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":54,"title":{},"body":{"injectables/ConfigService.html":{},"interfaces/EnvConfig.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["string(category.id",{"_index":428,"title":{},"body":{"injectables/ForumService.html":{}}}],["string(categoryid",{"_index":293,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{}}}],["string(id",{"_index":292,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["string(payload.categoryid",{"_index":432,"title":{},"body":{"injectables/ForumService.html":{}}}],["string(payload.createdby",{"_index":384,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["string(post.createdby",{"_index":383,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["sub",{"_index":611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subcategories",{"_index":426,"title":{},"body":{"injectables/ForumService.html":{}}}],["subject",{"_index":555,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":548,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":562,"title":{},"body":{"license.html":{}}}],["support",{"_index":591,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":592,"title":{},"body":{"modules.html":{}}}],["table",{"_index":476,"title":{},"body":{"coverage.html":{}}}],["tablecategories",{"_index":457,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tablecomments",{"_index":458,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tablename",{"_index":329,"title":{},"body":{"injectables/ForumRepository.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["tablename('categories",{"_index":337,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["tablename('comments",{"_index":367,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["tablename('posts",{"_index":341,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["tablename('reactions",{"_index":407,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["tableposts",{"_index":459,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tablereactions",{"_index":460,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":475,"title":{},"body":{"coverage.html":{}}}],["this._errorlevel",{"_index":168,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.dbclient",{"_index":111,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["this.dbclient().get",{"_index":336,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.dbclient().put",{"_index":375,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.dbclient().query",{"_index":362,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.dbclient().scan",{"_index":350,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.dbclient_get",{"_index":164,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.dbclient_put",{"_index":167,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.dbclient_query",{"_index":166,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.dbclient_scan",{"_index":165,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.dynamodb",{"_index":113,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["this.dynamodbservice.getdbclient",{"_index":333,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.envconfig",{"_index":69,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.envconfig[key",{"_index":74,"title":{},"body":{"injectables/ConfigService.html":{}}}],["this.forumservice.createpost(payload",{"_index":254,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.createpostcomment(payload",{"_index":255,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.createpostreaction(payload",{"_index":256,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.getcategory(payload",{"_index":251,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.getpost(payload",{"_index":253,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.listcategories(payload",{"_index":250,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.listmaincategories",{"_index":247,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.listposts(payload",{"_index":252,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.updatepost(payload",{"_index":257,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.get",{"_index":159,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.get(payload",{"_index":175,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.getpostbyid(payload.id",{"_index":382,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.police.sanitizepost(post",{"_index":377,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.police.sanitizepostcomment(comment",{"_index":403,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.police.sanitizepostreaction(reaction",{"_index":406,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.put",{"_index":163,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.put(payload",{"_index":182,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.query",{"_index":162,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.query(payload",{"_index":180,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.repository.createpost(payload",{"_index":438,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.createpostcomment(payload",{"_index":439,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.createpostreaction(payload",{"_index":440,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.getcategorybyid(payload.categoryid",{"_index":425,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.getcategorybyid(post.categoryid",{"_index":434,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.getpostbyid(payload.postid",{"_index":433,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.listmaincategories",{"_index":424,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.listpostcomments(post.id",{"_index":436,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.listpostsbycategoryid",{"_index":430,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.listsubcategories",{"_index":427,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.updatepost(payload",{"_index":441,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.reset",{"_index":158,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.scan",{"_index":161,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.scan(payload",{"_index":178,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.shouldtriggererror(errlevel.get",{"_index":171,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.shouldtriggererror(errlevel.put",{"_index":181,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.shouldtriggererror(errlevel.query",{"_index":179,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.shouldtriggererror(errlevel.scan",{"_index":177,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["throw",{"_index":385,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["title",{"_index":281,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":290,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["tort",{"_index":585,"title":{},"body":{"license.html":{}}}],["transport",{"_index":621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transport.grpc",{"_index":622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type",{"_index":59,"title":{},"body":{"injectables/ConfigService.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":110,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["updatedat",{"_index":288,"title":{},"body":{"injectables/ForumPolice.html":{},"miscellaneous/variables.html":{}}}],["updatepost",{"_index":201,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["updatepost(payload",{"_index":226,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["url",{"_index":624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":543,"title":{},"body":{"license.html":{}}}],["user1",{"_index":614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usevalue",{"_index":40,"title":{},"body":{"modules/ConfigModule.html":{}}}],["uuid",{"_index":326,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["uuidv4",{"_index":325,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["v4",{"_index":324,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["validate",{"_index":291,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["value",{"_index":131,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":451,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":597,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":150,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["warranties",{"_index":569,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":565,"title":{},"body":{"license.html":{}}}],["whether",{"_index":582,"title":{},"body":{"license.html":{}}}],["withcategoryid",{"_index":366,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["without",{"_index":538,"title":{},"body":{"license.html":{}}}],["withparentid",{"_index":364,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["withpostid",{"_index":368,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["zoom",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/ConfigModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nDynamodbModule\n\nDynamodbModule\n\nAppModule -->\n\nDynamodbModule->AppModule\n\n\n\n\n\nForumModule\n\nForumModule\n\nAppModule -->\n\nForumModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                        \n                            DynamodbModule\n                        \n                        \n                            ForumModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from './config/config.module';\nimport { ForumModule } from './forum/forum.module';\nimport { DynamodbModule } from './dynamodb/dynamodb.module';\n\n@Module({\n  imports: [ConfigModule, DynamodbModule, ForumModule],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigService } from './config.service';\n\n@Global()\n@Module({\n  providers: [\n    {\n      provide: ConfigService,\n      useValue: new ConfigService(`.env`),\n    },\n  ],\n  exports: [ConfigService],\n})\nexport class ConfigModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ConfigService.html":{"url":"injectables/ConfigService.html","title":"injectable - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/config/config.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EnvConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/config/config.service.ts:8\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import * as dotenv from 'dotenv';\nimport * as fs from 'fs';\nimport { EnvConfig } from './config.interfaces';\nimport { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class ConfigService {\n  private readonly envConfig: EnvConfig;\n\n  constructor(filePath: string) {\n    this.envConfig = dotenv.parse(fs.readFileSync(filePath));\n  }\n\n  get(key: string): string {\n    if (key in process.env) {\n      return process.env[key];\n    }\n\n    return this.envConfig[key];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DynamodbModule.html":{"url":"modules/DynamodbModule.html","title":"module - DynamodbModule","body":"\n                   \n\n\n\n\n    Modules\n    DynamodbModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DynamodbModule\n\n\n\ncluster_DynamodbModule_exports\n\n\n\ncluster_DynamodbModule_providers\n\n\n\ncluster_DynamodbModule_imports\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nDynamodbModule\n\nDynamodbModule\n\nDynamodbModule -->\n\nConfigModule->DynamodbModule\n\n\n\n\n\nDynamodbService \n\nDynamodbService \n\nDynamodbService  -->\n\nDynamodbModule->DynamodbService \n\n\n\n\n\nDynamodbService\n\nDynamodbService\n\nDynamodbModule -->\n\nDynamodbService->DynamodbModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/dynamodb/dynamodb.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DynamodbService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ConfigModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DynamodbService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { ConfigModule } from 'src/config/config.module';\nimport { DynamodbService } from './dynamodb.service';\n\n@Global()\n@Module({\n  imports: [ConfigModule],\n  providers: [DynamodbService],\n  exports: [DynamodbService],\n})\nexport class DynamodbModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DynamodbService.html":{"url":"injectables/DynamodbService.html","title":"injectable - DynamodbService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DynamodbService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dynamodb/dynamodb.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dbClient\n                            \n                            \n                                    Private\n                                dynamoDB\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDBClient\n                            \n                            \n                                getDynamoDB\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/dynamodb/dynamodb.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDBClient\n                        \n                        \n                    \n                \n            \n            \n                \ngetDBClient()\n                \n            \n\n\n            \n                \n                    Defined in src/dynamodb/dynamodb.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DocumentClient\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDynamoDB\n                        \n                        \n                    \n                \n            \n            \n                \ngetDynamoDB()\n                \n            \n\n\n            \n                \n                    Defined in src/dynamodb/dynamodb.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     AWS.DynamoDB\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dbClient\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DocumentClient\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/dynamodb.service.ts:8\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dynamoDB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AWS.DynamoDB\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/dynamodb.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import * as AWS from 'aws-sdk';\nimport { DocumentClient } from 'aws-sdk/clients/dynamodb';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from 'src/config/config.service';\n\n@Injectable()\nexport class DynamodbService {\n  private dbClient: DocumentClient;\n  private dynamoDB: AWS.DynamoDB;\n\n  constructor(configService: ConfigService) {\n    AWS.config.update({\n      accessKeyId: configService.get('AWS_ACCESS_KEY_ID') || 'dummyAccessKeyId',\n      secretAccessKey:\n        configService.get('AWS_SECRET_ACCESS_KEY') || 'dummySecretAccessKey',\n      region: configService.get('AWS_REGION'),\n      dynamodb: {\n        endpoint: configService.get('DYNAMODB_ENDPOINT') || undefined,\n      },\n    });\n\n    this.dbClient = new AWS.DynamoDB.DocumentClient();\n    this.dynamoDB = new AWS.DynamoDB();\n  }\n\n  getDBClient(): DocumentClient {\n    return this.dbClient;\n  }\n\n  getDynamoDB(): AWS.DynamoDB {\n    return this.dynamoDB;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamodbServiceMock.html":{"url":"classes/DynamodbServiceMock.html","title":"class - DynamodbServiceMock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamodbServiceMock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dynamodb/__mocks__/dynamodb.service.mock.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _errorLevel\n                            \n                            \n                                    Private\n                                dbClient_get\n                            \n                            \n                                    Private\n                                dbClient_put\n                            \n                            \n                                    Private\n                                dbClient_query\n                            \n                            \n                                    Private\n                                dbClient_scan\n                            \n                            \n                                error\n                            \n                            \n                                get\n                            \n                            \n                                put\n                            \n                            \n                                query\n                            \n                            \n                                scan\n                            \n                            \n                                    Private\n                                shouldTriggerError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDBClient\n                            \n                            \n                                reset\n                            \n                            \n                                setErrorLevel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:17\n                            \n                        \n\n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _errorLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ERRLEVEL\n\n                        \n                    \n                    \n                        \n                            Default value : ERRLEVEL.none\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dbClient_get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dbClient_put\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:85\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dbClient_query\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dbClient_scan\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Error\n\n                        \n                    \n                    \n                        \n                            Default value : new Error('test-error')\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jest.Mock\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            put\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jest.Mock\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            query\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jest.Mock\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scan\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jest.Mock\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            shouldTriggerError\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:43\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDBClient\n                        \n                        \n                    \n                \n            \n            \n                \ngetDBClient()\n                \n            \n\n\n            \n                \n                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { get: (payload: any, callback: (err: any, data: any) => void) => void; scan: (payload: any, call...\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            reset\n                        \n                        \n                    \n                \n            \n            \n                \nreset()\n                \n            \n\n\n            \n                \n                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setErrorLevel\n                        \n                        \n                    \n                \n            \n            \n                \nsetErrorLevel(errorLevel: ERRLEVEL)\n                \n            \n\n\n            \n                \n                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorLevel\n                                    \n                                                ERRLEVEL\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export enum ERRLEVEL {\n  none,\n  all,\n  get,\n  scan,\n  query,\n  put,\n}\n\nexport class DynamodbServiceMock {\n  get: jest.Mock;\n  scan: jest.Mock;\n  query: jest.Mock;\n  put: jest.Mock;\n  error: Error = new Error('test-error');\n\n  private _errorLevel: ERRLEVEL = ERRLEVEL.none;\n\n  constructor() {\n    this.reset();\n  }\n\n  reset() {\n    this.get = jest.fn();\n    this.scan = jest.fn();\n    this.query = jest.fn();\n    this.put = jest.fn();\n  }\n\n  getDBClient() {\n    return {\n      get: this.dbClient_get,\n      scan: this.dbClient_scan,\n      query: this.dbClient_query,\n      put: this.dbClient_put,\n    };\n  }\n\n  setErrorLevel(errorLevel: ERRLEVEL) {\n    this._errorLevel = errorLevel;\n  }\n\n  private shouldTriggerError = (currentLevel: ERRLEVEL) => {\n    return (\n      this._errorLevel === ERRLEVEL.all || this._errorLevel === currentLevel\n    );\n  };\n\n  private dbClient_get = (\n    payload: any,\n    callback: (err: any, data: any) => void,\n  ) => {\n    if (this.shouldTriggerError(ERRLEVEL.get)) {\n      callback(this.error, null);\n      return;\n    }\n    const result = this.get(payload);\n    callback(null, result);\n  };\n\n  private dbClient_scan = (\n    payload: any,\n    callback: (err: any, data: any) => void,\n  ) => {\n    if (this.shouldTriggerError(ERRLEVEL.scan)) {\n      callback(this.error, null);\n      return;\n    }\n    const result = this.scan(payload);\n    callback(null, result);\n  };\n\n  private dbClient_query = (\n    payload: any,\n    callback: (err: any, data: any) => void,\n  ) => {\n    if (this.shouldTriggerError(ERRLEVEL.query)) {\n      callback(this.error, null);\n      return;\n    }\n    const result = this.query(payload);\n    callback(null, result);\n  };\n\n  private dbClient_put = (\n    payload: any,\n    callback: (err: any, data: any) => void,\n  ) => {\n    if (this.shouldTriggerError(ERRLEVEL.put)) {\n      callback(this.error, null);\n      return;\n    }\n    const result = this.put(payload);\n    callback(null, result);\n  };\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/EnvConfig.html":{"url":"interfaces/EnvConfig.html","title":"interface - EnvConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  EnvConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.interfaces.ts\n        \n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        string\n\n                    \n                \n                        \n                            \n                                Defined in src/config/config.interfaces.ts:1\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        export interface EnvConfig {\n  [key: string]: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ForumController.html":{"url":"controllers/ForumController.html","title":"controller - ForumController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ForumController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/forum/forum.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                createPostComment\n                            \n                            \n                                    Public\n                                createPostReaction\n                            \n                            \n                                    Public\n                                getCategory\n                            \n                            \n                                    Public\n                                getPost\n                            \n                            \n                                    Public\n                                listMainCategories\n                            \n                            \n                                    Public\n                                listPosts\n                            \n                            \n                                    Public\n                                ping\n                            \n                            \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createPost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(payload: ICreatePost_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createPostComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPostComment(payload: ICreatePostComment_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePostComment_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createPostReaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPostReaction(payload: ICreatePostReaction_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePostReaction_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategory(payload: IGetCategory_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IGetCategory_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPost(payload: IGetPost_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IGetPost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            listMainCategories\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    listMainCategories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            listPosts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    listPosts(payload: IListPosts_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IListPosts_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            ping\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    ping()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     IPing_Response\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updatePost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(payload: IUpdatePost_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IUpdatePost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { GrpcMethod, Payload } from '@nestjs/microservices';\nimport { ForumService } from './forum.service';\nimport {\n  ICreatePostComment_Request,\n  ICreatePostComment_Response,\n  ICreatePostReaction_Request,\n  ICreatePostReaction_Response,\n  ICreatePost_Request,\n  ICreatePost_Response,\n  IForumClient,\n  IGetCategory_Request,\n  IGetCategory_Response,\n  IGetPost_Request,\n  IGetPost_Response,\n  IListMainCategories_Response,\n  IListPosts_Request,\n  IListPosts_Response,\n  IPing_Response,\n  IUpdatePost_Request,\n  IUpdatePost_Response,\n} from 'msforum-grpc';\n\n@Controller()\nexport class ForumController implements IForumClient {\n  constructor(private readonly forumService: ForumService) {}\n\n  @GrpcMethod('ForumService')\n  public ping(): IPing_Response {\n    return { ping: 'pong' };\n  }\n\n  @GrpcMethod('ForumService')\n  public listMainCategories(): Promise {\n    return this.forumService.listMainCategories();\n  }\n\n  // @GrpcMethod('ForumService')\n  // public listCategories(\n  //   @Payload() payload: IListCategories_Request,\n  // ): Promise {\n  //   return this.forumService.listCategories(payload);\n  // }\n\n  @GrpcMethod('ForumService')\n  public getCategory(\n    @Payload() payload: IGetCategory_Request,\n  ): Promise {\n    return this.forumService.getCategory(payload);\n  }\n\n  @GrpcMethod('ForumService')\n  public listPosts(\n    @Payload() payload: IListPosts_Request,\n  ): Promise {\n    return this.forumService.listPosts(payload);\n  }\n\n  @GrpcMethod('ForumService')\n  public getPost(\n    @Payload() payload: IGetPost_Request,\n  ): Promise {\n    return this.forumService.getPost(payload);\n  }\n\n  @GrpcMethod('ForumService')\n  public createPost(\n    @Payload() payload: ICreatePost_Request,\n  ): Promise {\n    return this.forumService.createPost(payload);\n  }\n\n  @GrpcMethod('ForumService')\n  public createPostComment(\n    @Payload() payload: ICreatePostComment_Request,\n  ): Promise {\n    return this.forumService.createPostComment(payload);\n  }\n\n  @GrpcMethod('ForumService')\n  public createPostReaction(\n    @Payload() payload: ICreatePostReaction_Request,\n  ): Promise {\n    return this.forumService.createPostReaction(payload);\n  }\n\n  @GrpcMethod('ForumService')\n  public updatePost(\n    @Payload() payload: IUpdatePost_Request,\n  ): Promise {\n    return this.forumService.updatePost(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ForumModule.html":{"url":"modules/ForumModule.html","title":"module - ForumModule","body":"\n                   \n\n\n\n\n    Modules\n    ForumModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ForumModule\n\n\n\ncluster_ForumModule_providers\n\n\n\n\nForumPolice\n\nForumPolice\n\n\n\nForumModule\n\nForumModule\n\nForumModule -->\n\nForumPolice->ForumModule\n\n\n\n\n\nForumRepository\n\nForumRepository\n\nForumModule -->\n\nForumRepository->ForumModule\n\n\n\n\n\nForumService\n\nForumService\n\nForumModule -->\n\nForumService->ForumModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/forum/forum.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ForumPolice\n                        \n                        \n                            ForumRepository\n                        \n                        \n                            ForumService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ForumController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ForumService } from './forum.service';\nimport { ForumController } from './forum.controller';\nimport { ForumRepository } from './forum.repository';\nimport { ForumPolice } from './forum.police';\n\n@Module({\n  imports: [],\n  controllers: [ForumController],\n  providers: [ForumService, ForumRepository, ForumPolice],\n})\nexport class ForumModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ForumPolice.html":{"url":"injectables/ForumPolice.html","title":"injectable - ForumPolice","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ForumPolice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/forum/forum.police.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                sanitizePost\n                            \n                            \n                                    Public\n                                sanitizePostComment\n                            \n                            \n                                    Public\n                                sanitizePostReaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            sanitizePost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sanitizePost(undefined: IPost)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.police.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            IPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IPost\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            sanitizePostComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sanitizePostComment(undefined: IPostComment)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.police.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            IPostComment\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IPostComment\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            sanitizePostReaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sanitizePostReaction(undefined: IPostReaction)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.police.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            IPostReaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IPostReaction\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { IPost, IPostComment, IPostReaction } from 'msforum-grpc';\n\n@Injectable()\nexport class ForumPolice {\n  public sanitizePost({\n    id,\n    categoryId,\n    title,\n    excerpt,\n    content,\n    createdAt,\n    createdBy,\n    postState,\n    postType,\n    updatedAt,\n    commentsCount,\n  }: IPost): IPost {\n    // @TODO ~ Validate\n\n    return {\n      id: String(id),\n      categoryId: String(categoryId),\n      title,\n      excerpt,\n      content,\n      createdAt,\n      createdBy: createdBy || null,\n      postState,\n      postType,\n      updatedAt,\n      commentsCount,\n    };\n  }\n\n  public sanitizePostComment({\n    id,\n    postId,\n    parentId,\n    createdBy,\n    content,\n    createdAt,\n  }: IPostComment): IPostComment {\n    return {\n      id,\n      postId,\n      parentId,\n      createdBy: createdBy || null,\n      content,\n      createdAt,\n    };\n  }\n\n  public sanitizePostReaction({\n    id,\n    postId,\n    commentId,\n    reactType,\n    createdBy,\n    createdAt,\n  }: IPostReaction): IPostReaction {\n    return {\n      id,\n      postId,\n      commentId,\n      reactType,\n      createdBy: createdBy || null,\n      createdAt,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ForumRepository.html":{"url":"injectables/ForumRepository.html","title":"injectable - ForumRepository","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ForumRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/forum/forum.repository.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createPost\n                            \n                            \n                                createPostComment\n                            \n                            \n                                createPostReaction\n                            \n                            \n                                    Private\n                                dbClient\n                            \n                            \n                                getCategoryById\n                            \n                            \n                                getPostById\n                            \n                            \n                                listMainCategories\n                            \n                            \n                                listPostComments\n                            \n                            \n                                listPostsByCategoryId\n                            \n                            \n                                listSubcategories\n                            \n                            \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dynamodbService: DynamodbService, police: ForumPolice)\n                    \n                \n                        \n                            \n                                Defined in src/forum/forum.repository.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dynamodbService\n                                                  \n                                                        \n                                                                        DynamodbService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        police\n                                                  \n                                                        \n                                                                        ForumPolice\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createPost\n                        \n                        \n                    \n                \n            \n            \n                \ncreatePost(payload: ICreatePost_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createPostComment\n                        \n                        \n                    \n                \n            \n            \n                \ncreatePostComment(payload: ICreatePostComment_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:240\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePostComment_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createPostReaction\n                        \n                        \n                    \n                \n            \n            \n                \ncreatePostReaction(payload: ICreatePostReaction_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:273\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePostReaction_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            dbClient\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    dbClient()\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DocumentClient\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCategoryById\n                        \n                        \n                    \n                \n            \n            \n                \ngetCategoryById(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPostById\n                        \n                        \n                    \n                \n            \n            \n                \ngetPostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listMainCategories\n                        \n                        \n                    \n                \n            \n            \n                \nlistMainCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listPostComments\n                        \n                        \n                    \n                \n            \n            \n                \nlistPostComments(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:151\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listPostsByCategoryId\n                        \n                        \n                    \n                \n            \n            \n                \nlistPostsByCategoryId(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:129\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listSubcategories\n                        \n                        \n                    \n                \n            \n            \n                \nlistSubcategories(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updatePost\n                        \n                        \n                    \n                \n            \n            \n                \nupdatePost(payload: IUpdatePost_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:207\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IUpdatePost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AWSError } from 'aws-sdk';\nimport { v4 as uuidv4 } from 'uuid';\nimport { DocumentClient } from 'aws-sdk/clients/dynamodb';\nimport {\n  ICategory,\n  ICreatePostComment_Request,\n  ICreatePostComment_Response,\n  ICreatePostReaction_Request,\n  ICreatePostReaction_Response,\n  ICreatePost_Request,\n  IPost,\n  IPostComment,\n  IPostReaction,\n  IUpdatePost_Request,\n} from 'msforum-grpc';\nimport { DynamodbService } from 'src/dynamodb/dynamodb.service';\nimport { TableName } from 'src/dynamodb/dynamodb.utils';\nimport { ForumPolice } from './forum.police';\nimport { defaultValue } from 'src/utils';\n\n@Injectable()\nexport class ForumRepository {\n  constructor(\n    private readonly dynamodbService: DynamodbService,\n    private readonly police: ForumPolice,\n  ) {}\n\n  private dbClient(): DocumentClient {\n    return this.dynamodbService.getDBClient();\n  }\n\n  getCategoryById(categoryId: string): Promise {\n    return new Promise((resolve, reject) => {\n      this.dbClient().get(\n        {\n          TableName: TableName('categories'),\n          Key: {\n            id: String(categoryId),\n          },\n        },\n        (err: AWSError, data: DocumentClient.GetItemOutput) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(data.Item as ICategory);\n        },\n      );\n    });\n  }\n\n  getPostById(postId: string): Promise {\n    return new Promise((resolve, reject) => {\n      this.dbClient().get(\n        {\n          TableName: TableName('posts'),\n          Key: {\n            id: postId,\n          },\n        },\n        (err: AWSError, data: DocumentClient.GetItemOutput) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(data.Item as IPost);\n        },\n      );\n    });\n  }\n\n  // Aws SDK docs\n  // https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/dynamodb-example-query-scan.html\n  listMainCategories(): Promise {\n    return new Promise((resolve, reject) => {\n      // Query operators on Dynamodb\n      // https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.OperatorsAndFunctions.html\n      this.dbClient().scan(\n        {\n          TableName: TableName('categories'),\n          FilterExpression:\n            'attribute_not_exists(parentId) or parentId = :empty',\n          ExpressionAttributeValues: {\n            ':empty': null,\n          },\n        },\n        (err: AWSError, data: DocumentClient.QueryOutput) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          /***********************************\n           * data:\n           * {\n           *   Items: [{id: '1', title: 'Category 1',...}],\n           *   Count: 1,\n           *   ScannedCount: 1\n           * }\n           */\n          resolve(data.Items as ICategory[]);\n        },\n      );\n    });\n  }\n\n  listSubcategories(categoryId: string): Promise {\n    return new Promise((resolve, reject) => {\n      this.dbClient().query(\n        {\n          TableName: TableName('categories'),\n          IndexName: 'WithParentId',\n          KeyConditionExpression: 'parentId = :parentId',\n          ExpressionAttributeValues: {\n            ':parentId': categoryId,\n          },\n        },\n        (err: AWSError, data: DocumentClient.QueryOutput) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(data.Items as ICategory[]);\n        },\n      );\n    });\n  }\n\n  listPostsByCategoryId(categoryId: string): Promise {\n    return new Promise((resolve, reject) => {\n      this.dbClient().query(\n        {\n          TableName: TableName('posts'),\n          IndexName: 'WithCategoryId',\n          KeyConditionExpression: 'categoryId = :categoryId',\n          ExpressionAttributeValues: {\n            ':categoryId': categoryId,\n          },\n        },\n        (err: AWSError, data: DocumentClient.QueryOutput) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(data.Items as IPost[]);\n        },\n      );\n    });\n  }\n\n  listPostComments(postId: string): Promise {\n    return new Promise((resolve, reject) => {\n      this.dbClient().query(\n        {\n          TableName: TableName('comments'),\n          IndexName: 'WithPostId',\n          KeyConditionExpression: 'postId = :postId',\n          ExpressionAttributeValues: {\n            ':postId': postId,\n          },\n          Select: 'ALL_ATTRIBUTES',\n        },\n        (err: AWSError, data: DocumentClient.QueryOutput) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(data.Items as IPostComment[]);\n        },\n      );\n    });\n  }\n\n  createPost(payload: ICreatePost_Request): Promise {\n    return new Promise((resolve, reject) => {\n      const { createdBy, title, excerpt, content, categoryId } = payload;\n\n      const post: IPost = {\n        id: uuidv4(),\n        commentsCount: 0,\n        createdAt: new Date().toISOString(),\n        postType: 'post',\n        postState: 'open',\n        createdBy,\n        title,\n        excerpt,\n        content,\n        categoryId,\n      };\n\n      this.dbClient().put(\n        {\n          TableName: TableName('posts'),\n          Item: this.police.sanitizePost(post),\n        },\n        (err: AWSError) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(post);\n        },\n      );\n    });\n  }\n\n  updatePost(payload: IUpdatePost_Request): Promise {\n    return new Promise(async (resolve, reject) => {\n      const post = await this.getPostById(payload.id);\n\n      if (String(post.createdBy) !== String(payload.createdBy)) {\n        // @TODO ~ Throw correct error\n        reject(new Error(`Invalid author`));\n      }\n\n      post.title = defaultValue(payload.title, post.title, false);\n      post.excerpt = defaultValue(payload.excerpt, post.excerpt, false);\n      post.postType = defaultValue(payload.postType, post.postType, false);\n      post.postState = defaultValue(payload.postState, post.postState, false);\n      post.content = defaultValue(payload.content, post.content, false);\n\n      const Item = this.police.sanitizePost(post);\n\n      this.dbClient().put(\n        {\n          TableName: TableName('posts'),\n          Item,\n        },\n        (err: AWSError) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(Item);\n        },\n      );\n    });\n  }\n\n  createPostComment(\n    payload: ICreatePostComment_Request,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const { postId, parentId, createdBy, content } = payload;\n\n      const comment: IPostComment = {\n        id: uuidv4(),\n        postId,\n        parentId,\n        createdBy,\n        content,\n        createdAt: new Date().toISOString(),\n      };\n\n      const Item = this.police.sanitizePostComment(comment);\n\n      this.dbClient().put(\n        {\n          TableName: TableName('comments'),\n          Item,\n        },\n        (err: AWSError) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(comment);\n        },\n      );\n    });\n  }\n\n  createPostReaction(\n    payload: ICreatePostReaction_Request,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const { postId, commentId, reactType, createdBy } = payload;\n\n      const reaction: IPostReaction = {\n        id: uuidv4(),\n        postId,\n        commentId,\n        reactType,\n        createdBy,\n        createdAt: new Date().toISOString(),\n      };\n\n      const Item = this.police.sanitizePostReaction(reaction);\n\n      this.dbClient().put(\n        {\n          TableName: TableName('reactions'),\n          Item,\n        },\n        (err: AWSError) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(reaction);\n        },\n      );\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ForumService.html":{"url":"injectables/ForumService.html","title":"injectable - ForumService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ForumService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/forum/forum.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                createPostComment\n                            \n                            \n                                    Async\n                                createPostReaction\n                            \n                            \n                                    Async\n                                getCategory\n                            \n                            \n                                    Async\n                                getPost\n                            \n                            \n                                    Async\n                                listMainCategories\n                            \n                            \n                                    Async\n                                listPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ForumRepository)\n                    \n                \n                        \n                            \n                                Defined in src/forum/forum.service.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ForumRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createPost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(payload: ICreatePost_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createPostComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPostComment(payload: ICreatePostComment_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePostComment_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createPostReaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPostReaction(payload: ICreatePostReaction_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePostReaction_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategory(payload: IGetCategory_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IGetCategory_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPost(payload: IGetPost_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IGetPost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            listMainCategories\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    listMainCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            listPosts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    listPosts(payload: IListPosts_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IListPosts_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatePost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(payload: IUpdatePost_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:101\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IUpdatePost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DocumentClient } from 'aws-sdk/clients/dynamodb';\nimport {\n  ICategory,\n  IGetCategory_Request,\n  IGetCategory_Response,\n  IPost,\n  IPostType,\n} from 'msforum-grpc';\nimport {\n  ICreatePostComment_Request,\n  ICreatePostComment_Response,\n  ICreatePostReaction_Request,\n  ICreatePostReaction_Response,\n  ICreatePost_Request,\n  ICreatePost_Response,\n  IGetPost_Request,\n  IGetPost_Response,\n  IListMainCategories_Response,\n  IListPosts_Request,\n  IListPosts_Response,\n  IUpdatePost_Request,\n  IUpdatePost_Response,\n} from 'msforum-grpc';\nimport { ForumRepository } from './forum.repository';\n\n@Injectable()\nexport class ForumService {\n  constructor(private readonly repository: ForumRepository) {}\n\n  async listMainCategories(): Promise {\n    const categories = await this.repository.listMainCategories();\n\n    return {\n      categories,\n    };\n  }\n\n  async getCategory(\n    payload: IGetCategory_Request,\n  ): Promise {\n    const category = await this.repository.getCategoryById(payload.categoryId);\n    const subcategories = await this.repository.listSubcategories(\n      String(category.id),\n    );\n    const posts = await this.repository.listPostsByCategoryId(\n      String(category.id),\n    );\n\n    return await Promise.resolve({\n      category,\n      subcategories,\n      posts,\n    });\n  }\n\n  async listPosts(payload: IListPosts_Request): Promise {\n    const posts = await this.repository.listPostsByCategoryId(\n      String(payload.categoryId),\n    );\n\n    return {\n      posts,\n    };\n  }\n\n  async getPost(payload: IGetPost_Request): Promise {\n    const post = await this.repository.getPostById(payload.postId);\n    const category = await this.repository.getCategoryById(post.categoryId);\n    const comments = await this.repository.listPostComments(post.id);\n\n    return await Promise.resolve({\n      post,\n      category,\n      comments,\n      // @TODO ~ reactions\n      reactions: [],\n    });\n  }\n\n  async createPost(\n    payload: ICreatePost_Request,\n  ): Promise {\n    return await this.repository.createPost(payload);\n  }\n\n  async createPostComment(\n    payload: ICreatePostComment_Request,\n  ): Promise {\n    return await this.repository.createPostComment(payload);\n  }\n\n  async createPostReaction(\n    payload: ICreatePostReaction_Request,\n  ): Promise {\n    return await this.repository.createPostReaction(payload);\n  }\n\n  async updatePost(\n    payload: IUpdatePost_Request,\n  ): Promise {\n    return await this.repository.updatePost(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/config/config.interfaces.ts\n            \n            interface\n            EnvConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/config.service.ts\n            \n            injectable\n            ConfigService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dynamodb/__mocks__/dynamodb.service.mock.ts\n            \n            class\n            DynamodbServiceMock\n            \n                0 %\n                (0/16)\n            \n        \n        \n            \n                \n                src/dynamodb/dynamodb.service.ts\n            \n            injectable\n            DynamodbService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/dynamodb/dynamodb.utils.ts\n            \n            variable\n            TableName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dynamodb/migrations.ts\n            \n            function\n            logTableCreated\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dynamodb/migrations.ts\n            \n            function\n            logTableError\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dynamodb/migrations.ts\n            \n            function\n            run\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dynamodb/migrations.ts\n            \n            function\n            tableCategories\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dynamodb/migrations.ts\n            \n            function\n            tableComments\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dynamodb/migrations.ts\n            \n            function\n            tablePosts\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dynamodb/migrations.ts\n            \n            function\n            tableReactions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dynamodb/migrations.ts\n            \n            variable\n            configService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dynamodb/migrations.ts\n            \n            variable\n            dynamoDB\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/dynamodb/migrations.ts\n            \n            variable\n            dynamodbService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/forum/forum.controller.ts\n            \n            controller\n            ForumController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/forum/forum.mock.ts\n            \n            variable\n            categoryList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/forum/forum.mock.ts\n            \n            variable\n            postList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/forum/forum.police.ts\n            \n            injectable\n            ForumPolice\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/forum/forum.repository.ts\n            \n            injectable\n            ForumRepository\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/forum/forum.service.ts\n            \n            injectable\n            ForumService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/grpc.options.ts\n            \n            variable\n            grpcPort\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/grpc.options.ts\n            \n            variable\n            microserviceOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            allowedEnvNames\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            defaultValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            delayMs\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            requiredEnvs\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws/dynamodb-data-mapper : ^0.7.3\n        \n            @aws/dynamodb-data-mapper-annotations : ^0.7.3\n        \n            @grpc/proto-loader : ^0.6.1\n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^7.6.15\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            aws-sdk : ^2.890.0\n        \n            dotenv : ^9.0.2\n        \n            grpc : ^1.24.6\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ERRLEVEL   (src/.../dynamodb.service.mock.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/dynamodb/__mocks__/dynamodb.service.mock.ts\n    \n        \n            \n                \n                    \n                        \n                        ERRLEVEL\n                    \n                \n                        \n                            \n                                 none\n                            \n                        \n                        \n                            \n                                 all\n                            \n                        \n                        \n                            \n                                 get\n                            \n                        \n                        \n                            \n                                 scan\n                            \n                        \n                        \n                            \n                                 query\n                            \n                        \n                        \n                            \n                                 put\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            defaultValue   (src/.../utils.ts)\n                        \n                        \n                            delayMs   (src/.../utils.ts)\n                        \n                        \n                            logTableCreated   (src/.../migrations.ts)\n                        \n                        \n                            logTableError   (src/.../migrations.ts)\n                        \n                        \n                            requiredEnvs   (src/.../utils.ts)\n                        \n                        \n                            run   (src/.../migrations.ts)\n                        \n                        \n                            tableCategories   (src/.../migrations.ts)\n                        \n                        \n                            tableComments   (src/.../migrations.ts)\n                        \n                        \n                            tablePosts   (src/.../migrations.ts)\n                        \n                        \n                            tableReactions   (src/.../migrations.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            defaultValue\n                        \n                        \n                    \n                \n            \n            \n                \ndefaultValue(value: any, defaultValue: any, preserveFalsy: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    defaultValue\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    preserveFalsy\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delayMs\n                        \n                        \n                    \n                \n            \n            \n                \ndelayMs(ms: number)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ms\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requiredEnvs\n                        \n                        \n                    \n                \n            \n            \n                \nrequiredEnvs(envNames)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    envNames\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    src/dynamodb/migrations.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            logTableCreated\n                        \n                        \n                    \n                \n            \n            \n                \nlogTableCreated(tableName)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tableName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            logTableError\n                        \n                        \n                    \n                \n            \n            \n                \nlogTableError(tableName, err)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    tableName\n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            run\n                        \n                        \n                    \n                \n            \n            \n                \nrun()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            tableCategories\n                        \n                        \n                    \n                \n            \n            \n                \ntableCategories()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            tableComments\n                        \n                        \n                    \n                \n            \n            \n                \ntableComments()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            tablePosts\n                        \n                        \n                    \n                \n            \n            \n                \ntablePosts()\n                \n            \n\n\n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            tableReactions\n                        \n                        \n                    \n                \n            \n            \n                \ntableReactions()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nmsforum-grpc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 MicroEnv\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DynamodbModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ForumModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_DynamodbModule\n\n\n\ncluster_DynamodbModule_exports\n\n\n\ncluster_DynamodbModule_providers\n\n\n\ncluster_ForumModule\n\n\n\ncluster_ForumModule_providers\n\n\n\n\nConfigModule\n\nConfigModule\n\n\n\nDynamodbModule\n\nDynamodbModule\n\nDynamodbModule -->\n\nConfigModule->DynamodbModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\nAppModule -->\n\nDynamodbModule->AppModule\n\n\n\n\n\nDynamodbService \n\nDynamodbService \n\nDynamodbService  -->\n\nDynamodbModule->DynamodbService \n\n\n\n\n\nForumModule\n\nForumModule\n\nAppModule -->\n\nForumModule->AppModule\n\n\n\n\n\nDynamodbService\n\nDynamodbService\n\nDynamodbModule -->\n\nDynamodbService->DynamodbModule\n\n\n\n\n\nForumPolice\n\nForumPolice\n\nForumModule -->\n\nForumPolice->ForumModule\n\n\n\n\n\nForumRepository\n\nForumRepository\n\nForumModule -->\n\nForumRepository->ForumModule\n\n\n\n\n\nForumService\n\nForumService\n\nForumModule -->\n\nForumService->ForumModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            allowedEnvNames   (src/.../main.ts)\n                        \n                        \n                            categoryList   (src/.../forum.mock.ts)\n                        \n                        \n                            configService   (src/.../migrations.ts)\n                        \n                        \n                            dynamoDB   (src/.../migrations.ts)\n                        \n                        \n                            dynamodbService   (src/.../migrations.ts)\n                        \n                        \n                            grpcPort   (src/.../grpc.options.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            microserviceOptions   (src/.../grpc.options.ts)\n                        \n                        \n                            postList   (src/.../forum.mock.ts)\n                        \n                        \n                            TableName   (src/.../dynamodb.utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            allowedEnvNames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['local', 'production']\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('Main')\n                        \n                    \n\n\n            \n        \n\n    src/forum/forum.mock.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            categoryList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IListMainCategories_Response\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  categories: [\n    {\n      id: '1',\n      title: 'Category 1 title',\n      description: 'Category 1 description',\n      postsCount: 101,\n      createdAt: new Date().toISOString(),\n      parentId: null,\n    },\n    {\n      id: '2',\n      title: 'Category 2 title',\n      description: 'Category 2 description',\n      postsCount: 102,\n      createdAt: new Date().toISOString(),\n      parentId: null,\n    },\n    {\n      id: '3',\n      title: 'Category 3 title',\n      description: 'Category 3 description',\n      postsCount: 103,\n      createdAt: new Date().toISOString(),\n      parentId: null,\n    },\n    {\n      id: '4',\n      title: 'Sub-Category #1',\n      description: 'This category is inside Category 1',\n      postsCount: 2,\n      createdAt: new Date().toISOString(),\n      parentId: '1',\n    },\n  ],\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            postList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IPostList\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  posts: [\n    {\n      id: '1',\n      categoryId: '1',\n      createdBy: 'user1',\n      createdAt: new Date().toISOString(),\n      commentsCount: 3,\n      title: 'Post 1',\n      excerpt: 'Excerpt from the post',\n      postType: 'post',\n      postState: 'open',\n      updatedAt: null,\n      content: 'Full content of the post',\n    },\n    {\n      id: '2',\n      categoryId: '1',\n      createdBy: 'user1',\n      createdAt: new Date().toISOString(),\n      commentsCount: 3,\n      title: 'Post 2',\n      excerpt: 'Excerpt from the post',\n      postType: 'post',\n      postState: 'open',\n      updatedAt: null,\n      content: 'Full content of the post',\n    },\n    {\n      id: '3',\n      categoryId: '2',\n      createdBy: 'user1',\n      createdAt: new Date().toISOString(),\n      commentsCount: 3,\n      title: 'Post 3',\n      excerpt: 'Excerpt from the post',\n      postType: 'post',\n      postState: 'open',\n      updatedAt: null,\n      content: 'Full content of the post',\n    },\n  ],\n}\n                        \n                    \n\n\n            \n        \n\n    src/dynamodb/migrations.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            configService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new ConfigService('.env')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dynamoDB\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     AWS.DynamoDB\n\n                        \n                    \n                    \n                        \n                            Default value : dynamodbService.getDynamoDB()\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dynamodbService\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new DynamodbService(configService)\n                        \n                    \n\n\n            \n        \n\n    src/grpc.options.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            grpcPort\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : process.env.GRPC_PORT\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            microserviceOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GrpcOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  transport: Transport.GRPC,\n  options: {\n    url: `0.0.0.0:${grpcPort}`,\n    package: 'forum',\n    protoPath: join(__dirname, '../msforum-grpc.proto'),\n  },\n}\n                        \n                    \n\n\n            \n        \n\n    src/dynamodb/dynamodb.utils.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (\n  tableName: string,\n  prefix = process.env.DYNAMODB_TABLES_PREFIX || '',\n): string => {\n  if (prefix && prefix.charAt(prefix.length - 1) !== '_') {\n    prefix += '_';\n  }\n\n  return `${prefix}${tableName}`;\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
