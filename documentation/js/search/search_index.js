var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.987,1,1.53]],["body/modules/AppModule.html",[0,1.675,1,2.926,2,1.419,3,1.419,4,1.906,5,1.906,6,1.419,7,1.906,8,1.906,9,2.684,10,2.684,11,2.456,12,0.056,13,2.456,14,2.38,15,1.906,16,1.64,17,0.917,18,0.917,19,0.785,20,3.36,21,3.352,22,1.449,23,0.917,24,3.36,25,3.36,26,0.917,27,0.554,28,0.035,29,0.044,30,0.035]],["title/modules/DynamodbModule.html",[0,0.987,11,1.317]],["body/modules/DynamodbModule.html",[0,1.67,2,1.41,3,1.41,4,1.893,5,1.893,6,1.41,7,2.588,8,2.588,11,2.488,12,0.055,14,2.37,15,1.893,16,1.63,17,0.911,18,0.911,19,0.78,22,1.324,23,0.911,26,0.911,27,0.55,28,0.035,29,0.044,30,0.035,31,2.666,32,2.666,33,2.666,34,2.234,35,3.338,36,4.179,37,3.338,38,2.224]],["title/injectables/DynamodbService.html",[34,1.139,39,0.736]],["body/injectables/DynamodbService.html",[12,0.057,17,0.837,18,0.837,19,0.716,22,1.389,23,0.837,26,0.837,27,0.506,28,0.032,29,0.042,30,0.032,34,1.673,39,1.081,40,1.497,41,2.449,42,0.716,43,3.162,44,2.487,45,3.502,46,1.673,47,3.701,48,2.921,49,1.852,50,3.959,51,3.066,52,1.295,53,3.196,54,0.837,55,2.487,56,2.043,57,2.043,58,3.066,59,3.066,60,3.066,61,3.066,62,3.066,63,3.066,64,3.066,65,3.066,66,3.066,67,2.449,68,3.066,69,3.066,70,3.066,71,3.959,72,1.497,73,3.066,74,1.122]],["title/classes/DynamodbServiceMock.html",[27,0.445,75,1.797]],["body/classes/DynamodbServiceMock.html",[12,0.057,17,0.465,18,0.465,19,0.398,26,0.713,27,0.281,28,0.047,29,0.027,30,0.018,42,0.398,43,2.086,44,2.813,46,1.103,47,2.843,49,2.008,52,1.103,54,1.151,72,1.275,74,1.482,75,1.74,76,1.704,77,1.135,78,3.175,79,3.175,80,3.175,81,3.175,82,3.175,83,3.367,84,3.066,85,2.557,86,3.234,87,3.175,88,2.612,89,3.367,90,3.697,91,3.083,92,2.612,93,1.704,94,1.704,95,1.704,96,1.704,97,1.704,98,2.612,99,1.704,100,4.348,101,4.348,102,1.704,103,1.704,104,1.704,105,1.704,106,1.704,107,1.704,108,2.297,109,3.838,110,3.066,111,2.557,112,4.214,113,1.704,114,2.612,115,1.704,116,0.72,117,0.72,118,0.72,119,2.612,120,1.704,121,1.361,122,1.704,123,1.704,124,1.704,125,1.704,126,3.175,127,2.612,128,1.704,129,1.704,130,3.559,131,2.019,132,2.371,133,1.704,134,3.559,135,1.704,136,1.704,137,1.704,138,1.704,139,1.704,140,1.704]],["title/controllers/ForumController.html",[141,1.53,142,1.53]],["body/controllers/ForumController.html",[12,0.057,17,0.486,18,0.486,19,0.415,22,1.153,23,0.486,26,0.486,27,0.293,28,0.019,29,0.028,30,0.019,38,1.185,42,0.415,46,1.14,49,1.862,52,1.862,54,1.168,74,1.652,108,2.909,116,1.807,117,1.807,118,1.807,141,1.531,142,1.531,143,1.421,144,4.11,145,2.172,146,2.172,147,2.604,148,2.604,149,2.604,150,2.424,151,2.604,152,2.172,153,1.185,154,2.424,155,4.407,156,4.961,157,1.779,158,3.306,159,1.185,160,2.424,161,1.779,162,1.421,163,2.907,164,1.779,165,1.421,166,2.907,167,1.779,168,1.421,169,2.907,170,1.779,171,1.779,172,1.421,173,2.907,174,1.779,175,1.185,176,2.424,177,1.779,178,1.779,179,1.421,180,1.377,181,1.421,182,1.185,183,1.421,184,1.421,185,2.698,186,1.421,187,1.421,188,1.185,189,1.421,190,1.421,191,0.751,192,0.751,193,1.779,194,1.779,195,1.185,196,1.779,197,1.779,198,1.779,199,1.779,200,1.779,201,1.779,202,1.779,203,1.779,204,1.779,205,1.779,206,1.779]],["title/modules/ForumModule.html",[0,0.987,13,1.317]],["body/modules/ForumModule.html",[0,1.617,2,1.315,3,1.315,4,1.766,5,1.766,6,1.315,7,2.505,8,1.766,12,0.056,13,2.527,14,2.268,15,1.766,16,1.52,17,0.85,18,0.85,19,0.727,21,2.487,22,1.527,23,0.85,26,0.85,27,0.513,28,0.033,29,0.042,30,0.033,38,2.664,142,2.505,180,2.084,181,2.487,207,2.487,208,2.487,209,2.084,210,2.084,211,3.113,212,3.113,213,2.487,214,2.487]],["title/injectables/ForumPolice.html",[39,0.736,209,1.139]],["body/injectables/ForumPolice.html",[12,0.056,17,0.751,18,0.751,19,0.643,22,1.168,23,0.751,26,0.751,27,0.454,28,0.029,29,0.039,30,0.029,39,1.006,40,1.343,42,0.643,46,1.557,49,1.557,52,1.557,54,1.006,74,1.35,116,1.557,117,1.557,118,1.557,131,2.091,144,3.808,191,1.162,192,1.162,209,1.557,215,2.197,216,4.157,217,4.157,218,2.751,219,3.176,220,2.751,221,2.751,222,3.808,223,2.751,224,2.959,225,2.456,226,2.456,227,2.456,228,2.959,229,2.959,230,3.176,231,2.456,232,2.456,233,2.945,234,2.456,235,1.833,236,2.751,237,2.751,238,2.197,239,2.945,240,2.456]],["title/injectables/ForumRepository.html",[39,0.736,210,1.139]],["body/injectables/ForumRepository.html",[12,0.058,17,0.284,18,0.284,19,0.243,22,1.191,23,0.284,26,0.284,27,0.171,28,0.011,29,0.018,30,0.011,34,1.365,39,0.478,40,0.507,42,0.243,44,1.69,45,2.131,46,0.74,48,1.167,49,1.688,52,1.641,53,1.514,54,1.026,55,1.289,56,1.167,57,0.692,67,0.83,72,1.951,74,1.662,83,0.83,85,1.167,108,1.832,110,3.589,111,2.29,116,1.588,117,1.588,118,1.588,131,0.589,132,2.29,145,1.167,146,1.514,150,1.777,152,1.167,153,1.167,154,1.777,158,2.994,159,0.692,160,1.777,175,1.167,176,1.777,182,0.692,191,0.439,192,0.439,195,1.167,209,1.127,210,0.74,214,0.83,219,1.777,222,1.815,224,1.985,225,2.589,226,1.514,227,1.167,228,1.777,229,1.167,230,1.777,231,0.692,232,0.692,234,0.692,235,0.692,238,0.83,239,3.002,240,2.152,241,0.83,242,1.752,243,1.752,244,1.752,245,1.752,246,1.752,247,1.039,248,2.272,249,1.039,250,1.039,251,1.039,252,1.039,253,1.752,254,3.454,255,1.039,256,1.752,257,1.039,258,1.039,259,1.752,260,1.039,261,1.752,262,1.039,263,1.752,264,1.039,265,1.039,266,3.885,267,1.039,268,2.272,269,1.039,270,2.131,271,1.039,272,2.589,273,1.039,274,0.692,275,1.039,276,1.039,277,3.611,278,3.758,279,1.752,280,2.272,281,1.752,282,1.752,283,3.758,284,1.752,285,2.667,286,1.039,287,1.039,288,1.039,289,1.039,290,1.039,291,1.039,292,1.039,293,1.039,294,1.039,295,1.039,296,1.039,297,1.752,298,2.667,299,2.667,300,1.039,301,1.777,302,0.692,303,1.039,304,1.039,305,2.667,306,2.272,307,2.272,308,1.039,309,2.272,310,1.039,311,1.752,312,1.039,313,1.039,314,1.039,315,1.514,316,0.83,317,1.4,318,0.83,319,2.272,320,2.979,321,1.752,322,1.039,323,1.039,324,1.039,325,0.83,326,1.039,327,1.039,328,1.039,329,1.039,330,1.039,331,1.039,332,1.039,333,1.039,334,1.752,335,1.039,336,2.979,337,1.752,338,1.039,339,1.752,340,1.039,341,1.752,342,1.039,343,1.752,344,1.039,345,1.039,346,1.039,347,1.039,348,1.039]],["title/injectables/ForumService.html",[39,0.736,180,1.139]],["body/injectables/ForumService.html",[12,0.057,17,0.466,18,0.466,19,0.399,22,1.217,23,0.466,26,0.466,27,0.282,28,0.018,29,0.027,30,0.018,39,0.714,40,0.834,42,0.399,44,0.968,46,1.105,48,1.742,49,1.884,52,1.838,53,1.137,54,1.188,55,0.968,57,1.137,74,1.593,108,2.697,116,1.838,117,1.838,118,1.838,132,2.898,145,2.118,146,2.118,147,2.539,148,2.539,149,2.539,150,2.373,151,2.089,152,2.118,153,1.137,154,2.373,158,3.259,159,1.137,160,2.373,162,1.364,163,2.846,165,1.364,166,2.846,168,1.364,169,2.846,172,2.089,173,2.846,175,1.137,176,2.373,180,1.105,182,1.137,183,1.364,184,1.364,186,1.364,187,1.364,188,1.137,189,1.364,190,1.364,191,1.105,192,1.105,195,1.137,210,1.505,213,1.364,219,1.137,235,1.137,270,1.364,302,2.373,315,1.742,325,3.839,349,1.364,350,5.103,351,1.707,352,1.707,353,2.615,354,1.707,355,1.707,356,1.707,357,1.707,358,1.707,359,1.707,360,1.707,361,1.707,362,1.707,363,2.089,364,1.707,365,1.707,366,2.615,367,1.707,368,2.846,369,1.707,370,2.615,371,1.707,372,1.707,373,1.707,374,2.615,375,1.707,376,2.615,377,1.707,378,1.707,379,1.707,380,1.707]],["title/coverage.html",[381,2.905]],["body/coverage.html",[6,1.257,12,0.056,19,0.695,27,0.491,28,0.031,29,0.041,30,0.031,34,1.257,39,1.251,41,2.377,54,0.813,72,1.453,75,1.983,77,1.983,141,1.688,142,1.688,143,2.377,180,1.257,209,1.257,210,1.257,215,2.377,241,2.377,272,1.983,274,1.983,316,4.216,349,2.377,381,2.377,382,2.377,383,2.976,384,2.976,385,2.976,386,2.976,387,2.377,388,4.874,389,5.09,390,2.976,391,3.102,392,2.377,393,2.377,394,2.976,395,2.976,396,2.976,397,2.377,398,2.377,399,2.88,400,4.322,401,2.377,402,2.377,403,3.102,404,2.377,405,2.976,406,2.976]],["title/dependencies.html",[3,1.365,407,1.816]],["body/dependencies.html",[3,1.468,12,0.057,23,0.949,28,0.036,29,0.045,30,0.036,55,1.971,56,2.315,111,2.854,179,2.775,192,1.468,408,4.284,409,4.284,410,4.284,411,3.475,412,3.475,413,3.475,414,3.475,415,4.849,416,3.475,417,3.475,418,3.475,419,3.475,420,2.775,421,3.475,422,3.475,423,3.475,424,3.475,425,3.475,426,3.475,427,3.475,428,3.475,429,3.475]],["title/miscellaneous/enumerations.html",[430,0.96,431,2.581]],["body/miscellaneous/enumerations.html",[12,0.049,28,0.042,29,0.049,30,0.042,42,0.936,77,2.671,84,3.202,85,2.671,86,3.202,89,3.729,121,3.202,430,1.694,431,3.202,432,4.009]],["title/miscellaneous/functions.html",[430,0.96,433,2.581]],["body/miscellaneous/functions.html",[6,2.011,12,0.052,28,0.039,29,0.047,30,0.039,42,0.859,54,1.003,91,2.449,116,1.873,117,1.873,118,1.873,274,3.294,399,2.449,403,2.936,404,3.542,430,1.553,433,2.936,434,2.936,435,4.434,436,3.675,437,4.434,438,4.434,439,3.675,440,3.675]],["title/index.html",[42,0.531,441,1.816,442,1.816]],["body/index.html",[12,0.05,28,0.044,29,0.05,30,0.044,191,1.756,192,1.756]],["title/license.html",[441,1.816,442,1.816,443,1.816]],["body/license.html",[12,0.041,16,1.484,28,0.032,29,0.041,30,0.032,382,2.427,420,2.427,443,2.427,444,3.038,445,4.366,446,3.038,447,3.038,448,3.038,449,3.936,450,3.038,451,3.038,452,3.038,453,3.038,454,3.038,455,3.038,456,3.936,457,5.11,458,3.038,459,3.038,460,3.038,461,4.366,462,3.038,463,3.936,464,3.038,465,3.038,466,3.936,467,3.038,468,3.038,469,3.038,470,3.038,471,3.038,472,3.038,473,3.038,474,3.936,475,3.038,476,3.038,477,3.038,478,3.038,479,3.038,480,3.038,481,3.038,482,3.936,483,3.936,484,3.038,485,3.038,486,3.038,487,3.038,488,3.038,489,3.038,490,3.038,491,3.038,492,3.038,493,3.038,494,3.038,495,3.038,496,3.038,497,3.038,498,3.038,499,3.038,500,3.038,501,3.038,502,3.038,503,3.038,504,3.038,505,3.038,506,3.038,507,3.038,508,3.038,509,3.038,510,3.038,511,3.038,512,3.038]],["title/modules.html",[2,1.537]],["body/modules.html",[1,2.23,2,1.661,11,1.919,12,0.048,13,1.919,28,0.041,29,0.048,30,0.041,513,4.899,514,4.899,515,4.899,516,4.899]],["title/overview.html",[517,2.905]],["body/overview.html",[0,1.187,1,2.828,2,1.37,3,1.37,4,1.839,5,1.839,6,1.37,7,1.839,8,1.839,9,2.59,10,2.59,11,2.434,12,0.054,13,2.525,14,2.327,15,1.839,16,1.583,27,0.535,28,0.034,29,0.043,30,0.034,31,2.59,32,2.59,33,2.59,34,2.139,40,1.583,141,1.839,180,1.902,207,2.59,208,2.59,209,1.902,210,1.902,301,2.734,517,2.59,518,2.59,519,2.59]],["title/miscellaneous/variables.html",[430,0.96,520,2.581]],["body/miscellaneous/variables.html",[12,0.057,28,0.021,29,0.031,30,0.021,42,0.462,54,1.047,72,2.22,74,0.723,90,3.42,91,2.853,131,2.429,188,1.316,191,0.835,224,2.951,225,2.313,226,3.147,227,2.853,228,2.853,229,2.951,230,2.313,231,2.313,232,2.313,233,2.773,234,2.313,240,2.555,254,2.332,272,2.313,301,3.192,302,3.094,315,3.23,317,3.538,318,2.773,363,1.578,368,1.578,387,1.578,391,1.578,392,2.332,393,2.332,397,1.578,398,2.332,399,1.316,401,2.332,402,2.332,407,1.578,430,0.835,434,2.332,518,3.632,519,1.578,520,1.578,521,2.919,522,1.976,523,1.976,524,1.976,525,1.976,526,1.976,527,4.43,528,3.834,529,1.976,530,4.43,531,1.976,532,1.976,533,1.976,534,1.976,535,1.976,536,3.471,537,3.471,538,1.976,539,1.976,540,1.976,541,1.976,542,1.976,543,1.976,544,1.976,545,1.976,546,1.976,547,1.976,548,3.471,549,1.976,550,1.976,551,2.919,552,1.976]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":316,"title":{},"body":{"injectables/ForumRepository.html":{},"coverage.html":{}}}],["0.0.0.0:3000",{"_index":544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["0.6.1",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["0.7.3",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":389,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":396,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":395,"title":{},"body":{"coverage.html":{}}}],["0/14",{"_index":385,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":394,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":386,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":390,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":301,"title":{},"body":{"injectables/ForumRepository.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1.24.6",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["101",{"_index":529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["102",{"_index":531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["103",{"_index":532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.890.0",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["2021",{"_index":447,"title":{},"body":{"license.html":{}}}],["3",{"_index":518,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["3.0.2",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":519,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["6.6.6",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["_",{"_index":551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_errorlevel",{"_index":78,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["above",{"_index":481,"title":{},"body":{"license.html":{}}}],["accesskeyid",{"_index":59,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["action",{"_index":506,"title":{},"body":{"license.html":{}}}],["all_attributes",{"_index":314,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["allowedenvnames",{"_index":401,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["and/or",{"_index":472,"title":{},"body":{"license.html":{}}}],["annotations",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":510,"title":{},"body":{"license.html":{}}}],["associated",{"_index":458,"title":{},"body":{"license.html":{}}}],["async",{"_index":350,"title":{},"body":{"injectables/ForumService.html":{}}}],["attribute_not_exists(parentid",{"_index":296,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["author",{"_index":333,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["authors",{"_index":499,"title":{},"body":{"license.html":{}}}],["await",{"_index":325,"title":{},"body":{"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["aws",{"_index":55,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"dependencies.html":{}}}],["aws.config.update",{"_index":58,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["aws.dynamodb.documentclient",{"_index":73,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["aws/dynamodb",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["awserror",{"_index":266,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["boolean",{"_index":438,"title":{},"body":{"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":516,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":513,"title":{},"body":{"modules.html":{}}}],["c",{"_index":446,"title":{},"body":{"license.html":{}}}],["call",{"_index":113,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["callback",{"_index":109,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["callback(null",{"_index":134,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["callback(this.error",{"_index":130,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["categories",{"_index":363,"title":{},"body":{"injectables/ForumService.html":{},"miscellaneous/variables.html":{}}}],["category",{"_index":302,"title":{},"body":{"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/variables.html":{}}}],["categoryid",{"_index":225,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["categorylist",{"_index":392,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["charge",{"_index":453,"title":{},"body":{"license.html":{}}}],["claim",{"_index":502,"title":{},"body":{"license.html":{}}}],["class",{"_index":27,"title":{"classes/DynamodbServiceMock.html":{}},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"overview.html":{}}}],["classes",{"_index":76,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_dynamodbmodule",{"_index":31,"title":{},"body":{"modules/DynamodbModule.html":{},"overview.html":{}}}],["cluster_dynamodbmodule_exports",{"_index":32,"title":{},"body":{"modules/DynamodbModule.html":{},"overview.html":{}}}],["cluster_dynamodbmodule_providers",{"_index":33,"title":{},"body":{"modules/DynamodbModule.html":{},"overview.html":{}}}],["cluster_forummodule",{"_index":207,"title":{},"body":{"modules/ForumModule.html":{},"overview.html":{}}}],["cluster_forummodule_providers",{"_index":208,"title":{},"body":{"modules/ForumModule.html":{},"overview.html":{}}}],["comment",{"_index":346,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["comments",{"_index":374,"title":{},"body":{"injectables/ForumService.html":{}}}],["commentscount",{"_index":234,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["conditions",{"_index":480,"title":{},"body":{"license.html":{}}}],["connection",{"_index":511,"title":{},"body":{"license.html":{}}}],["const",{"_index":132,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["constructor",{"_index":48,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["constructor(dynamodbservice",{"_index":247,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["constructor(private",{"_index":194,"title":{},"body":{"controllers/ForumController.html":{}}}],["constructor(repository",{"_index":351,"title":{},"body":{"injectables/ForumService.html":{}}}],["content",{"_index":228,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":507,"title":{},"body":{"license.html":{}}}],["controller",{"_index":141,"title":{"controllers/ForumController.html":{}},"body":{"controllers/ForumController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":38,"title":{},"body":{"modules/DynamodbModule.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{}}}],["copies",{"_index":474,"title":{},"body":{"license.html":{}}}],["copy",{"_index":456,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":445,"title":{},"body":{"license.html":{}}}],["correct",{"_index":330,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["count",{"_index":303,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["coverage",{"_index":381,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["createdat",{"_index":229,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["createdby",{"_index":230,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["createpost",{"_index":145,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["createpost(payload",{"_index":153,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["createpostcomment",{"_index":146,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["createpostcomment(payload",{"_index":159,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["createpostreaction",{"_index":147,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["createpostreaction(payload",{"_index":162,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["currentlevel",{"_index":127,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["damages",{"_index":503,"title":{},"body":{"license.html":{}}}],["data",{"_index":111,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{},"dependencies.html":{}}}],["date().toisostring",{"_index":317,"title":{},"body":{"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["dbclient",{"_index":45,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{}}}],["dbclient_get",{"_index":79,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["dbclient_put",{"_index":80,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["dbclient_query",{"_index":81,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["dbclient_scan",{"_index":82,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["deal",{"_index":460,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":512,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}],["decorators",{"_index":155,"title":{},"body":{"controllers/ForumController.html":{}}}],["default",{"_index":90,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":274,"title":{},"body":{"injectables/ForumRepository.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["defaultvalue(payload.content",{"_index":344,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["defaultvalue(payload.excerpt",{"_index":338,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["defaultvalue(payload.poststate",{"_index":342,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["defaultvalue(payload.posttype",{"_index":340,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["defaultvalue(payload.title",{"_index":335,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["defaultvalue(value",{"_index":436,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defined",{"_index":49,"title":{},"body":{"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["distribute",{"_index":470,"title":{},"body":{"license.html":{}}}],["docs",{"_index":286,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["documentation",{"_index":382,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["documentclient",{"_index":53,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["documentclient.getitemoutput",{"_index":282,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["documentclient.queryoutput",{"_index":299,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["dummyaccesskeyid",{"_index":61,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["dummysecretaccesskey",{"_index":64,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["dynamodb",{"_index":67,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{}}}],["dynamodb.service",{"_index":37,"title":{},"body":{"modules/DynamodbModule.html":{}}}],["dynamodb/dynamodb.module",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["dynamodbmodule",{"_index":11,"title":{"modules/DynamodbModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules.html":{},"overview.html":{}}}],["dynamodbservice",{"_index":34,"title":{"injectables/DynamodbService.html":{}},"body":{"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{},"coverage.html":{},"overview.html":{}}}],["dynamodbservicemock",{"_index":75,"title":{"classes/DynamodbServiceMock.html":{}},"body":{"classes/DynamodbServiceMock.html":{},"coverage.html":{}}}],["empty",{"_index":297,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["endpoint",{"_index":68,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["enum",{"_index":120,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["enumerations",{"_index":431,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envnames",{"_index":440,"title":{},"body":{"miscellaneous/functions.html":{}}}],["err",{"_index":110,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{}}}],["errlevel",{"_index":89,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"miscellaneous/enumerations.html":{}}}],["errlevel.all",{"_index":128,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["errlevel.none",{"_index":92,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["error",{"_index":83,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{}}}],["error('test",{"_index":98,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["error(`invalid",{"_index":332,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["errorlevel",{"_index":119,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["event",{"_index":498,"title":{},"body":{"license.html":{}}}],["example",{"_index":290,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["excerpt",{"_index":227,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["export",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}],["express",{"_index":420,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["expressionattributevalues",{"_index":298,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["false",{"_index":336,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{}}}],["files",{"_index":459,"title":{},"body":{"license.html":{}}}],["filterexpression",{"_index":295,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["fitness",{"_index":494,"title":{},"body":{"license.html":{}}}],["following",{"_index":479,"title":{},"body":{"license.html":{}}}],["forum",{"_index":542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forum.controller",{"_index":212,"title":{},"body":{"modules/ForumModule.html":{}}}],["forum.police",{"_index":214,"title":{},"body":{"modules/ForumModule.html":{},"injectables/ForumRepository.html":{}}}],["forum.repository",{"_index":213,"title":{},"body":{"modules/ForumModule.html":{},"injectables/ForumService.html":{}}}],["forum.service",{"_index":181,"title":{},"body":{"controllers/ForumController.html":{},"modules/ForumModule.html":{}}}],["forum/forum.module",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["forumcontroller",{"_index":142,"title":{"controllers/ForumController.html":{}},"body":{"controllers/ForumController.html":{},"modules/ForumModule.html":{},"coverage.html":{}}}],["forummodule",{"_index":13,"title":{"modules/ForumModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ForumModule.html":{},"modules.html":{},"overview.html":{}}}],["forumpolice",{"_index":209,"title":{"injectables/ForumPolice.html":{}},"body":{"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"coverage.html":{},"overview.html":{}}}],["forumrepository",{"_index":210,"title":{"injectables/ForumRepository.html":{}},"body":{"modules/ForumModule.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"overview.html":{}}}],["forumservice",{"_index":180,"title":{"injectables/ForumService.html":{}},"body":{"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumService.html":{},"coverage.html":{},"overview.html":{}}}],["free",{"_index":452,"title":{},"body":{"license.html":{}}}],["full",{"_index":537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":400,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":433,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":477,"title":{},"body":{"license.html":{}}}],["getcategory",{"_index":148,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["getcategory(payload",{"_index":165,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["getcategorybyid",{"_index":242,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["getcategorybyid(categoryid",{"_index":253,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["getdbclient",{"_index":47,"title":{},"body":{"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{}}}],["getpost",{"_index":149,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["getpost(payload",{"_index":168,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["getpostbyid",{"_index":243,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["getpostbyid(postid",{"_index":256,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["getting",{"_index":441,"title":{"index.html":{},"license.html":{}},"body":{}}],["global",{"_index":36,"title":{},"body":{"modules/DynamodbModule.html":{}}}],["granted",{"_index":451,"title":{},"body":{"license.html":{}}}],["grpc",{"_index":192,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"dependencies.html":{},"index.html":{}}}],["grpc.proto",{"_index":547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["grpc/proto",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["grpcmethod",{"_index":178,"title":{},"body":{"controllers/ForumController.html":{}}}],["grpcmethod('forumservice",{"_index":156,"title":{},"body":{"controllers/ForumController.html":{}}}],["grpcoptions",{"_index":538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guide/dynamodb",{"_index":289,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["hereby",{"_index":450,"title":{},"body":{"license.html":{}}}],["holders",{"_index":500,"title":{},"body":{"license.html":{}}}],["https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/expressions.operatorsandfunctions.html",{"_index":293,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["https://docs.aws.amazon.com/sdk",{"_index":287,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["icategory",{"_index":270,"title":{},"body":{"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["icreatepost_request",{"_index":154,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["icreatepost_response",{"_index":184,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["icreatepostcomment_request",{"_index":160,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["icreatepostcomment_response",{"_index":182,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["icreatepostreaction_request",{"_index":163,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["icreatepostreaction_response",{"_index":183,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["id",{"_index":224,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":383,"title":{},"body":{"coverage.html":{}}}],["iforumclient",{"_index":185,"title":{},"body":{"controllers/ForumController.html":{}}}],["igetcategory_request",{"_index":166,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["igetcategory_response",{"_index":186,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["igetpost_request",{"_index":169,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["igetpost_response",{"_index":187,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["ilistcategories_request",{"_index":198,"title":{},"body":{"controllers/ForumController.html":{}}}],["ilistmaincategories_response",{"_index":188,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{},"miscellaneous/variables.html":{}}}],["ilistposts_request",{"_index":173,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["ilistposts_response",{"_index":189,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["implements",{"_index":193,"title":{},"body":{"controllers/ForumController.html":{}}}],["implied",{"_index":490,"title":{},"body":{"license.html":{}}}],["import",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["imports",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/ForumModule.html":{}}}],["included",{"_index":484,"title":{},"body":{"license.html":{}}}],["including",{"_index":463,"title":{},"body":{"license.html":{}}}],["index",{"_index":42,"title":{"index.html":{}},"body":{"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexname",{"_index":307,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["injectable",{"_index":39,"title":{"injectables/DynamodbService.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}},"body":{"injectables/DynamodbService.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{}}}],["injectables",{"_index":40,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"overview.html":{}}}],["inside",{"_index":534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ipost",{"_index":219,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["ipostcomment",{"_index":222,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{}}}],["ipostlist",{"_index":535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iposttype",{"_index":362,"title":{},"body":{"injectables/ForumService.html":{}}}],["item",{"_index":320,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["items",{"_index":300,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["iupdatepost_request",{"_index":176,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["iupdatepost_response",{"_index":190,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["javascript/v2/developer",{"_index":288,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["jest.fn",{"_index":101,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["jest.mock",{"_index":100,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["join(__dirname",{"_index":546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":281,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["keyconditionexpression",{"_index":309,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["kind",{"_index":489,"title":{},"body":{"license.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}],["liability",{"_index":504,"title":{},"body":{"license.html":{}}}],["liable",{"_index":501,"title":{},"body":{"license.html":{}}}],["license",{"_index":443,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":464,"title":{},"body":{"license.html":{}}}],["limited",{"_index":491,"title":{},"body":{"license.html":{}}}],["listcategories",{"_index":197,"title":{},"body":{"controllers/ForumController.html":{}}}],["listmaincategories",{"_index":150,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["listpostcomments",{"_index":244,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["listpostcomments(postid",{"_index":259,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["listposts",{"_index":151,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["listposts(payload",{"_index":172,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumService.html":{}}}],["listpostsbycategoryid",{"_index":245,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["listpostsbycategoryid(categoryid",{"_index":261,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["listsubcategories",{"_index":246,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["listsubcategories(categoryid",{"_index":263,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["loader",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["local",{"_index":524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":402,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger('main",{"_index":526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mapper",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["matching",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":493,"title":{},"body":{"license.html":{}}}],["merge",{"_index":468,"title":{},"body":{"license.html":{}}}],["metadata",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":46,"title":{},"body":{"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["microenv",{"_index":448,"title":{},"body":{"license.html":{}}}],["microserviceoptions",{"_index":398,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":430,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":444,"title":{},"body":{"license.html":{}}}],["modify",{"_index":467,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"modules.html":{},"overview.html":{}}}],["msforum",{"_index":191,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":117,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/functions.html":{}}}],["nestjs/common",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["nestjs/microservices",{"_index":179,"title":{},"body":{"controllers/ForumController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":72,"title":{},"body":{"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["none",{"_index":121,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"miscellaneous/enumerations.html":{}}}],["noninfringement",{"_index":497,"title":{},"body":{"license.html":{}}}],["notice",{"_index":482,"title":{},"body":{"license.html":{}}}],["null",{"_index":131,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["obtaining",{"_index":455,"title":{},"body":{"license.html":{}}}],["open",{"_index":318,"title":{},"body":{"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["operators",{"_index":292,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["optional",{"_index":118,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":509,"title":{},"body":{"license.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":517,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":407,"title":{"dependencies.html":{}},"body":{"miscellaneous/variables.html":{}}}],["parameters",{"_index":116,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/functions.html":{}}}],["parentid",{"_index":240,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["particular",{"_index":495,"title":{},"body":{"license.html":{}}}],["payload",{"_index":108,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["permission",{"_index":449,"title":{},"body":{"license.html":{}}}],["permit",{"_index":475,"title":{},"body":{"license.html":{}}}],["person",{"_index":454,"title":{},"body":{"license.html":{}}}],["persons",{"_index":476,"title":{},"body":{"license.html":{}}}],["police",{"_index":248,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["portions",{"_index":486,"title":{},"body":{"license.html":{}}}],["post",{"_index":315,"title":{},"body":{"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/variables.html":{}}}],["post.content",{"_index":343,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["post.excerpt",{"_index":337,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["post.poststate",{"_index":341,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["post.posttype",{"_index":339,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["post.title",{"_index":334,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["postid",{"_index":239,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{}}}],["postlist",{"_index":393,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["posts",{"_index":368,"title":{},"body":{"injectables/ForumService.html":{},"miscellaneous/variables.html":{}}}],["postscount",{"_index":528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["poststate",{"_index":231,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["posttype",{"_index":232,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["prefix",{"_index":548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix.charat(prefix.length",{"_index":550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["prefix}${tablename",{"_index":552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preservefalsy",{"_index":437,"title":{},"body":{"miscellaneous/functions.html":{}}}],["private",{"_index":44,"title":{},"body":{"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["process.env.aws_access_key_id",{"_index":60,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["process.env.aws_region",{"_index":66,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["process.env.aws_secret_access_key",{"_index":63,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["process.env.dynamodb_endpoint",{"_index":69,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["process.env.dynamodb_tables_prefix",{"_index":549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":158,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["promise((resolve",{"_index":277,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["promise(async",{"_index":323,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["promise.resolve",{"_index":370,"title":{},"body":{"injectables/ForumService.html":{}}}],["promise.resolve(null",{"_index":379,"title":{},"body":{"injectables/ForumService.html":{}}}],["properties",{"_index":43,"title":{},"body":{"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{}}}],["protopath",{"_index":545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":487,"title":{},"body":{"license.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}],["public",{"_index":144,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumPolice.html":{}}}],["publish",{"_index":469,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":496,"title":{},"body":{"license.html":{}}}],["put",{"_index":84,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"miscellaneous/enumerations.html":{}}}],["query",{"_index":85,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"injectables/ForumRepository.html":{},"miscellaneous/enumerations.html":{}}}],["reactions",{"_index":376,"title":{},"body":{"injectables/ForumService.html":{}}}],["readonly",{"_index":195,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["reflect",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["region",{"_index":65,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["reject",{"_index":278,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["reject(err",{"_index":283,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["reject(new",{"_index":331,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["repository",{"_index":353,"title":{},"body":{"injectables/ForumService.html":{}}}],["requiredenvs",{"_index":404,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["requiredenvs(envnames",{"_index":439,"title":{},"body":{"miscellaneous/functions.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}],["resolve",{"_index":324,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["resolve(comment",{"_index":348,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["resolve(data.item",{"_index":284,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["resolve(data.items",{"_index":305,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["resolve(item",{"_index":345,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["resolve(post",{"_index":322,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["restriction",{"_index":462,"title":{},"body":{"license.html":{}}}],["result",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":74,"title":{},"body":{"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":52,"title":{},"body":{"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["rights",{"_index":465,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["rxjs",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["sanitizepost",{"_index":216,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["sanitizepost(undefined",{"_index":218,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["sanitizepostcomment",{"_index":217,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["sanitizepostcomment(undefined",{"_index":221,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["scan",{"_index":86,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"miscellaneous/enumerations.html":{}}}],["scan.html",{"_index":291,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["scannedcount",{"_index":304,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["sdk",{"_index":56,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{},"dependencies.html":{}}}],["sdk/clients/dynamodb",{"_index":57,"title":{},"body":{"injectables/DynamodbService.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["secretaccesskey",{"_index":62,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["select",{"_index":313,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["sell",{"_index":473,"title":{},"body":{"license.html":{}}}],["seterrorlevel",{"_index":88,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["seterrorlevel(errorlevel",{"_index":114,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["shall",{"_index":483,"title":{},"body":{"license.html":{}}}],["shouldtriggererror",{"_index":87,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["software",{"_index":457,"title":{},"body":{"license.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"modules/ForumModule.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["src/.../dynamodb.service.mock.ts",{"_index":432,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../dynamodb.utils.ts",{"_index":523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../forum.mock.ts",{"_index":521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../grpc.options.ts",{"_index":522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":434,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../utils.ts",{"_index":435,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app.module.ts",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts",{"_index":77,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:11",{"_index":102,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:12",{"_index":105,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:13",{"_index":104,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:14",{"_index":103,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:15",{"_index":99,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:17",{"_index":93,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:19",{"_index":107,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:28",{"_index":115,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:32",{"_index":106,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:36",{"_index":94,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:48",{"_index":97,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:60",{"_index":96,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/__mocks__/dynamodb.service.mock.ts:72",{"_index":95,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["src/dynamodb/dynamodb.module.ts",{"_index":35,"title":{},"body":{"modules/DynamodbModule.html":{}}}],["src/dynamodb/dynamodb.service",{"_index":271,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/dynamodb/dynamodb.service.ts",{"_index":41,"title":{},"body":{"injectables/DynamodbService.html":{},"coverage.html":{}}}],["src/dynamodb/dynamodb.service.ts:16",{"_index":50,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["src/dynamodb/dynamodb.service.ts:22",{"_index":51,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["src/dynamodb/dynamodb.utils",{"_index":273,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/dynamodb/dynamodb.utils.ts",{"_index":387,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/forum/forum.controller.ts",{"_index":143,"title":{},"body":{"controllers/ForumController.html":{},"coverage.html":{}}}],["src/forum/forum.controller.ts:28",{"_index":171,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:40",{"_index":167,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:47",{"_index":174,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:54",{"_index":170,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:61",{"_index":157,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:68",{"_index":161,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:75",{"_index":164,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.controller.ts:82",{"_index":177,"title":{},"body":{"controllers/ForumController.html":{}}}],["src/forum/forum.mock.ts",{"_index":391,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/forum/forum.module.ts",{"_index":211,"title":{},"body":{"modules/ForumModule.html":{}}}],["src/forum/forum.police.ts",{"_index":215,"title":{},"body":{"injectables/ForumPolice.html":{},"coverage.html":{}}}],["src/forum/forum.police.ts:36",{"_index":223,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["src/forum/forum.police.ts:6",{"_index":220,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["src/forum/forum.repository.ts",{"_index":241,"title":{},"body":{"injectables/ForumRepository.html":{},"coverage.html":{}}}],["src/forum/forum.repository.ts:104",{"_index":264,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:126",{"_index":262,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:148",{"_index":260,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:171",{"_index":250,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:20",{"_index":249,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:204",{"_index":265,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:237",{"_index":251,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:26",{"_index":252,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:30",{"_index":255,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:50",{"_index":257,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.repository.ts:72",{"_index":258,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/forum/forum.service.ts",{"_index":349,"title":{},"body":{"injectables/ForumService.html":{},"coverage.html":{}}}],["src/forum/forum.service.ts:24",{"_index":352,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:29",{"_index":359,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:37",{"_index":357,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:51",{"_index":360,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:59",{"_index":358,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:75",{"_index":354,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:81",{"_index":355,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:87",{"_index":356,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/forum/forum.service.ts:93",{"_index":361,"title":{},"body":{"injectables/ForumService.html":{}}}],["src/grpc.options.ts",{"_index":397,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":399,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/utils",{"_index":275,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["src/utils.ts",{"_index":403,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["started",{"_index":442,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":384,"title":{},"body":{"coverage.html":{}}}],["string",{"_index":254,"title":{},"body":{"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["string(categoryid",{"_index":238,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{}}}],["string(id",{"_index":237,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["string(payload.createdby",{"_index":328,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["string(post.createdby",{"_index":327,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["sub",{"_index":533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subcategories",{"_index":366,"title":{},"body":{"injectables/ForumService.html":{}}}],["subject",{"_index":478,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":471,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":485,"title":{},"body":{"license.html":{}}}],["support",{"_index":514,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":515,"title":{},"body":{"modules.html":{}}}],["table",{"_index":406,"title":{},"body":{"coverage.html":{}}}],["tablename",{"_index":272,"title":{},"body":{"injectables/ForumRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tablename('categories",{"_index":280,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["tablename('comments",{"_index":311,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["tablename('posts",{"_index":285,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":405,"title":{},"body":{"coverage.html":{}}}],["this._errorlevel",{"_index":126,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.dbclient",{"_index":71,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["this.dbclient().get",{"_index":279,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.dbclient().put",{"_index":319,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.dbclient().query",{"_index":306,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.dbclient().scan",{"_index":294,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.dbclient_get",{"_index":122,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.dbclient_put",{"_index":125,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.dbclient_query",{"_index":124,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.dbclient_scan",{"_index":123,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.dynamodbservice.getdbclient",{"_index":276,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.forumservice.createpost(payload",{"_index":203,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.createpostcomment(payload",{"_index":204,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.createpostreaction(payload",{"_index":205,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.getcategory(payload",{"_index":200,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.getpost(payload",{"_index":202,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.listcategories(payload",{"_index":199,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.listmaincategories",{"_index":196,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.listposts(payload",{"_index":201,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.forumservice.updatepost(payload",{"_index":206,"title":{},"body":{"controllers/ForumController.html":{}}}],["this.get(payload",{"_index":133,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.getpostbyid(payload.id",{"_index":326,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.police.sanitizepost(post",{"_index":321,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.police.sanitizepostcomment(comment",{"_index":347,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["this.put(payload",{"_index":140,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.query(payload",{"_index":138,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.repository.createpost(payload",{"_index":377,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.createpostcomment(payload",{"_index":378,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.getcategorybyid(payload.categoryid",{"_index":365,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.getcategorybyid(post.categoryid",{"_index":373,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.getpostbyid(payload.postid",{"_index":372,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.listmaincategories",{"_index":364,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.listpostcomments(post.id",{"_index":375,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.listpostsbycategoryid(string(category.id",{"_index":369,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.listpostsbycategoryid(string(payload.categoryid",{"_index":371,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.listsubcategories(string(category.id",{"_index":367,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.repository.updatepost(payload",{"_index":380,"title":{},"body":{"injectables/ForumService.html":{}}}],["this.scan(payload",{"_index":136,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.shouldtriggererror(errlevel.get",{"_index":129,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.shouldtriggererror(errlevel.put",{"_index":139,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.shouldtriggererror(errlevel.query",{"_index":137,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["this.shouldtriggererror(errlevel.scan",{"_index":135,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["throw",{"_index":329,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["title",{"_index":226,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"miscellaneous/variables.html":{}}}],["todo",{"_index":235,"title":{},"body":{"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["tort",{"_index":508,"title":{},"body":{"license.html":{}}}],["transport",{"_index":539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transport.grpc",{"_index":540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type",{"_index":54,"title":{},"body":{"injectables/DynamodbService.html":{},"classes/DynamodbServiceMock.html":{},"controllers/ForumController.html":{},"injectables/ForumPolice.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["types",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":70,"title":{},"body":{"injectables/DynamodbService.html":{}}}],["updatedat",{"_index":233,"title":{},"body":{"injectables/ForumPolice.html":{},"miscellaneous/variables.html":{}}}],["updatepost",{"_index":152,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["updatepost(payload",{"_index":175,"title":{},"body":{"controllers/ForumController.html":{},"injectables/ForumRepository.html":{},"injectables/ForumService.html":{}}}],["url",{"_index":543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":466,"title":{},"body":{"license.html":{}}}],["user1",{"_index":536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuid",{"_index":269,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["uuidv4",{"_index":268,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["v4",{"_index":267,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["validate",{"_index":236,"title":{},"body":{"injectables/ForumPolice.html":{}}}],["value",{"_index":91,"title":{},"body":{"classes/DynamodbServiceMock.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":388,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":520,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":112,"title":{},"body":{"classes/DynamodbServiceMock.html":{}}}],["warranties",{"_index":492,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":488,"title":{},"body":{"license.html":{}}}],["whether",{"_index":505,"title":{},"body":{"license.html":{}}}],["withcategoryid",{"_index":310,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["without",{"_index":461,"title":{},"body":{"license.html":{}}}],["withparentid",{"_index":308,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["withpostid",{"_index":312,"title":{},"body":{"injectables/ForumRepository.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/DynamodbModule.html":{},"modules/ForumModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nDynamodbModule\n\nDynamodbModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDynamodbModule->AppModule\n\n\n\n\n\nForumModule\n\nForumModule\n\nAppModule -->\n\nForumModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            DynamodbModule\n                        \n                        \n                            ForumModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ForumModule } from './forum/forum.module';\nimport { DynamodbModule } from './dynamodb/dynamodb.module';\n\n@Module({\n  imports: [DynamodbModule, ForumModule],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DynamodbModule.html":{"url":"modules/DynamodbModule.html","title":"module - DynamodbModule","body":"\n                   \n\n\n\n\n    Modules\n    DynamodbModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_DynamodbModule\n\n\n\ncluster_DynamodbModule_exports\n\n\n\ncluster_DynamodbModule_providers\n\n\n\n\nDynamodbService \n\nDynamodbService \n\n\n\nDynamodbModule\n\nDynamodbModule\n\nDynamodbService  -->\n\nDynamodbModule->DynamodbService \n\n\n\n\n\nDynamodbService\n\nDynamodbService\n\nDynamodbModule -->\n\nDynamodbService->DynamodbModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/dynamodb/dynamodb.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            DynamodbService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            DynamodbService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { DynamodbService } from './dynamodb.service';\n\n@Global()\n@Module({\n  controllers: [],\n  providers: [DynamodbService],\n  exports: [DynamodbService],\n})\nexport class DynamodbModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DynamodbService.html":{"url":"injectables/DynamodbService.html","title":"injectable - DynamodbService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  DynamodbService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dynamodb/dynamodb.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                dbClient\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDBClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/dynamodb/dynamodb.service.ts:16\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDBClient\n                        \n                        \n                    \n                \n            \n            \n                \ngetDBClient()\n                \n            \n\n\n            \n                \n                    Defined in src/dynamodb/dynamodb.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DocumentClient\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dbClient\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     DocumentClient\n\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/dynamodb.service.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import * as AWS from 'aws-sdk';\nimport { DocumentClient } from 'aws-sdk/clients/dynamodb';\nimport { Injectable } from '@nestjs/common';\n\nAWS.config.update({\n  accessKeyId: process.env.AWS_ACCESS_KEY_ID || 'dummyAccessKeyId',\n  secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || 'dummySecretAccessKey',\n  region: process.env.AWS_REGION,\n  dynamodb: {\n    endpoint: process.env.DYNAMODB_ENDPOINT || undefined,\n  },\n});\n\n@Injectable()\nexport class DynamodbService {\n  private dbClient: DocumentClient;\n\n  constructor() {\n    this.dbClient = new AWS.DynamoDB.DocumentClient();\n  }\n\n  getDBClient(): DocumentClient {\n    return this.dbClient;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DynamodbServiceMock.html":{"url":"classes/DynamodbServiceMock.html","title":"class - DynamodbServiceMock","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DynamodbServiceMock\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/dynamodb/__mocks__/dynamodb.service.mock.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                _errorLevel\n                            \n                            \n                                    Private\n                                dbClient_get\n                            \n                            \n                                    Private\n                                dbClient_put\n                            \n                            \n                                    Private\n                                dbClient_query\n                            \n                            \n                                    Private\n                                dbClient_scan\n                            \n                            \n                                error\n                            \n                            \n                                get\n                            \n                            \n                                put\n                            \n                            \n                                query\n                            \n                            \n                                scan\n                            \n                            \n                                    Private\n                                shouldTriggerError\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getDBClient\n                            \n                            \n                                setErrorLevel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            _errorLevel\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         ERRLEVEL\n\n                        \n                    \n                    \n                        \n                            Default value : ERRLEVEL.none\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dbClient_get\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dbClient_put\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:72\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dbClient_query\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            dbClient_scan\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            error\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Error\n\n                        \n                    \n                    \n                        \n                            Default value : new Error('test-error')\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            get\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jest.Mock\n\n                        \n                    \n                    \n                        \n                            Default value : jest.fn()\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            put\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jest.Mock\n\n                        \n                    \n                    \n                        \n                            Default value : jest.fn()\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            query\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jest.Mock\n\n                        \n                    \n                    \n                        \n                            Default value : jest.fn()\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            scan\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     jest.Mock\n\n                        \n                    \n                    \n                        \n                            Default value : jest.fn()\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            shouldTriggerError\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : () => {...}\n                        \n                    \n                        \n                            \n                                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:32\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getDBClient\n                        \n                        \n                    \n                \n            \n            \n                \ngetDBClient()\n                \n            \n\n\n            \n                \n                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     { get: (payload: any, callback: (err: any, data: any) => void) => void; scan: (payload: any, call...\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            setErrorLevel\n                        \n                        \n                    \n                \n            \n            \n                \nsetErrorLevel(errorLevel: ERRLEVEL)\n                \n            \n\n\n            \n                \n                    Defined in src/dynamodb/__mocks__/dynamodb.service.mock.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    errorLevel\n                                    \n                                                ERRLEVEL\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export enum ERRLEVEL {\n  none,\n  all,\n  get,\n  scan,\n  query,\n  put,\n}\n\nexport class DynamodbServiceMock {\n  get: jest.Mock = jest.fn();\n  scan: jest.Mock = jest.fn();\n  query: jest.Mock = jest.fn();\n  put: jest.Mock = jest.fn();\n  error: Error = new Error('test-error');\n\n  private _errorLevel: ERRLEVEL = ERRLEVEL.none;\n\n  getDBClient() {\n    return {\n      get: this.dbClient_get,\n      scan: this.dbClient_scan,\n      query: this.dbClient_query,\n      put: this.dbClient_put,\n    };\n  }\n\n  setErrorLevel(errorLevel: ERRLEVEL) {\n    this._errorLevel = errorLevel;\n  }\n\n  private shouldTriggerError = (currentLevel: ERRLEVEL) => {\n    return this._errorLevel === ERRLEVEL.all || this._errorLevel === currentLevel;\n  }\n\n  private dbClient_get = (\n    payload: any,\n    callback: (err: any, data: any) => void,\n  ) => {\n    if (this.shouldTriggerError(ERRLEVEL.get)) {\n      callback(this.error, null);\n      return;\n    }\n    const result = this.get(payload);\n    callback(null, result);\n  }\n\n  private dbClient_scan = (\n    payload: any,\n    callback: (err: any, data: any) => void,\n  ) => {\n    if (this.shouldTriggerError(ERRLEVEL.scan)) {\n      callback(this.error, null);\n      return;\n    }\n    const result = this.scan(payload);\n    callback(null, result);\n  }\n\n  private dbClient_query = (\n    payload: any,\n    callback: (err: any, data: any) => void,\n  ) => {\n    if (this.shouldTriggerError(ERRLEVEL.query)) {\n      callback(this.error, null);\n      return;\n    }\n    const result = this.query(payload);\n    callback(null, result);\n  }\n\n  private dbClient_put = (\n    payload: any,\n    callback: (err: any, data: any) => void,\n  ) => {\n    if (this.shouldTriggerError(ERRLEVEL.put)) {\n      callback(this.error, null);\n      return;\n    }\n    const result = this.put(payload);\n    callback(null, result);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ForumController.html":{"url":"controllers/ForumController.html","title":"controller - ForumController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ForumController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/forum/forum.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                createPostComment\n                            \n                            \n                                    Public\n                                createPostReaction\n                            \n                            \n                                    Public\n                                getCategory\n                            \n                            \n                                    Public\n                                getPost\n                            \n                            \n                                    Public\n                                listMainCategories\n                            \n                            \n                                    Public\n                                listPosts\n                            \n                            \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createPost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(payload: ICreatePost_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createPostComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPostComment(payload: ICreatePostComment_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePostComment_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            createPostReaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPostReaction(payload: ICreatePostReaction_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePostReaction_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategory(payload: IGetCategory_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IGetCategory_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getPost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPost(payload: IGetPost_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IGetPost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            listMainCategories\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    listMainCategories()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            listPosts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    listPosts(payload: IListPosts_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IListPosts_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            updatePost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(payload: IUpdatePost_Request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @GrpcMethod('ForumService')\n                \n            \n\n            \n                \n                    Defined in src/forum/forum.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IUpdatePost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { GrpcMethod, Payload } from '@nestjs/microservices';\nimport { ForumService } from './forum.service';\nimport {\n  ICreatePostComment_Request,\n  ICreatePostComment_Response,\n  ICreatePostReaction_Request,\n  ICreatePostReaction_Response,\n  ICreatePost_Request,\n  ICreatePost_Response,\n  IForumClient,\n  IGetCategory_Request,\n  IGetCategory_Response,\n  IGetPost_Request,\n  IGetPost_Response,\n  IListMainCategories_Response,\n  IListPosts_Request,\n  IListPosts_Response,\n  IUpdatePost_Request,\n  IUpdatePost_Response,\n} from 'msforum-grpc';\n\n@Controller()\nexport class ForumController implements IForumClient {\n  constructor(private readonly forumService: ForumService) {}\n\n  @GrpcMethod('ForumService')\n  public listMainCategories(): Promise {\n    return this.forumService.listMainCategories();\n  }\n\n  // @GrpcMethod('ForumService')\n  // public listCategories(\n  //   @Payload() payload: IListCategories_Request,\n  // ): Promise {\n  //   return this.forumService.listCategories(payload);\n  // }\n\n  @GrpcMethod('ForumService')\n  public getCategory(\n    @Payload() payload: IGetCategory_Request,\n  ): Promise {\n    return this.forumService.getCategory(payload);\n  }\n\n  @GrpcMethod('ForumService')\n  public listPosts(\n    @Payload() payload: IListPosts_Request,\n  ): Promise {\n    return this.forumService.listPosts(payload);\n  }\n\n  @GrpcMethod('ForumService')\n  public getPost(\n    @Payload() payload: IGetPost_Request,\n  ): Promise {\n    return this.forumService.getPost(payload);\n  }\n\n  @GrpcMethod('ForumService')\n  public createPost(\n    @Payload() payload: ICreatePost_Request,\n  ): Promise {\n    return this.forumService.createPost(payload);\n  }\n\n  @GrpcMethod('ForumService')\n  public createPostComment(\n    @Payload() payload: ICreatePostComment_Request,\n  ): Promise {\n    return this.forumService.createPostComment(payload);\n  }\n\n  @GrpcMethod('ForumService')\n  public createPostReaction(\n    @Payload() payload: ICreatePostReaction_Request,\n  ): Promise {\n    return this.forumService.createPostReaction(payload);\n  }\n\n  @GrpcMethod('ForumService')\n  public updatePost(\n    @Payload() payload: IUpdatePost_Request,\n  ): Promise {\n    return this.forumService.updatePost(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ForumModule.html":{"url":"modules/ForumModule.html","title":"module - ForumModule","body":"\n                   \n\n\n\n\n    Modules\n    ForumModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ForumModule\n\n\n\ncluster_ForumModule_providers\n\n\n\n\nForumPolice\n\nForumPolice\n\n\n\nForumModule\n\nForumModule\n\nForumModule -->\n\nForumPolice->ForumModule\n\n\n\n\n\nForumRepository\n\nForumRepository\n\nForumModule -->\n\nForumRepository->ForumModule\n\n\n\n\n\nForumService\n\nForumService\n\nForumModule -->\n\nForumService->ForumModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/forum/forum.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ForumPolice\n                        \n                        \n                            ForumRepository\n                        \n                        \n                            ForumService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ForumController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ForumService } from './forum.service';\nimport { ForumController } from './forum.controller';\nimport { ForumRepository } from './forum.repository';\nimport { ForumPolice } from './forum.police';\n\n@Module({\n  imports: [],\n  controllers: [ForumController],\n  providers: [ForumService, ForumRepository, ForumPolice],\n})\nexport class ForumModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ForumPolice.html":{"url":"injectables/ForumPolice.html","title":"injectable - ForumPolice","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ForumPolice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/forum/forum.police.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                sanitizePost\n                            \n                            \n                                    Public\n                                sanitizePostComment\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            sanitizePost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sanitizePost(undefined: IPost)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.police.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            IPost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IPost\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            sanitizePostComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    sanitizePostComment(undefined: IPostComment)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.police.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                            IPostComment\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     IPostComment\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { IPost, IPostComment } from 'msforum-grpc';\n\n@Injectable()\nexport class ForumPolice {\n  public sanitizePost({\n    id,\n    categoryId,\n    title,\n    excerpt,\n    content,\n    createdAt,\n    createdBy,\n    postState,\n    postType,\n    updatedAt,\n    commentsCount,\n  }: IPost): IPost {\n    // @TODO ~ Validate\n\n    return {\n      id: String(id),\n      categoryId: String(categoryId),\n      title,\n      excerpt,\n      content,\n      createdAt,\n      createdBy: createdBy || null,\n      postState,\n      postType,\n      updatedAt,\n      commentsCount,\n    };\n  }\n\n  public sanitizePostComment({\n    id,\n    postId,\n    parentId,\n    createdBy,\n    content,\n    createdAt,\n  }: IPostComment): IPostComment {\n    return {\n      id,\n      postId,\n      parentId,\n      createdBy: createdBy || null,\n      content,\n      createdAt,\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ForumRepository.html":{"url":"injectables/ForumRepository.html","title":"injectable - ForumRepository","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ForumRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/forum/forum.repository.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createPost\n                            \n                            \n                                createPostComment\n                            \n                            \n                                    Private\n                                dbClient\n                            \n                            \n                                getCategoryById\n                            \n                            \n                                getPostById\n                            \n                            \n                                listMainCategories\n                            \n                            \n                                listPostComments\n                            \n                            \n                                listPostsByCategoryId\n                            \n                            \n                                listSubcategories\n                            \n                            \n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dynamodbService: DynamodbService, police: ForumPolice)\n                    \n                \n                        \n                            \n                                Defined in src/forum/forum.repository.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dynamodbService\n                                                  \n                                                        \n                                                                        DynamodbService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        police\n                                                  \n                                                        \n                                                                        ForumPolice\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createPost\n                        \n                        \n                    \n                \n            \n            \n                \ncreatePost(payload: ICreatePost_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:171\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createPostComment\n                        \n                        \n                    \n                \n            \n            \n                \ncreatePostComment(payload: ICreatePostComment_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:237\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePostComment_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            dbClient\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    dbClient()\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     DocumentClient\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCategoryById\n                        \n                        \n                    \n                \n            \n            \n                \ngetCategoryById(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPostById\n                        \n                        \n                    \n                \n            \n            \n                \ngetPostById(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listMainCategories\n                        \n                        \n                    \n                \n            \n            \n                \nlistMainCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listPostComments\n                        \n                        \n                    \n                \n            \n            \n                \nlistPostComments(postId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:148\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    postId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listPostsByCategoryId\n                        \n                        \n                    \n                \n            \n            \n                \nlistPostsByCategoryId(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            listSubcategories\n                        \n                        \n                    \n                \n            \n            \n                \nlistSubcategories(categoryId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updatePost\n                        \n                        \n                    \n                \n            \n            \n                \nupdatePost(payload: IUpdatePost_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.repository.ts:204\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IUpdatePost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AWSError } from 'aws-sdk';\nimport { v4 as uuidv4 } from 'uuid';\nimport { DocumentClient } from 'aws-sdk/clients/dynamodb';\nimport {\n  ICategory,\n  ICreatePostComment_Request,\n  ICreatePostComment_Response,\n  ICreatePost_Request,\n  IPost,\n  IPostComment,\n  IUpdatePost_Request,\n} from 'msforum-grpc';\nimport { DynamodbService } from 'src/dynamodb/dynamodb.service';\nimport { TableName } from 'src/dynamodb/dynamodb.utils';\nimport { ForumPolice } from './forum.police';\nimport { defaultValue } from 'src/utils';\n\n@Injectable()\nexport class ForumRepository {\n  constructor(\n    private readonly dynamodbService: DynamodbService,\n    private readonly police: ForumPolice,\n  ) {}\n\n  private dbClient(): DocumentClient {\n    return this.dynamodbService.getDBClient();\n  }\n\n  getCategoryById(categoryId: string): Promise {\n    return new Promise((resolve, reject) => {\n      this.dbClient().get(\n        {\n          TableName: TableName('categories'),\n          Key: {\n            id: String(categoryId),\n          },\n        },\n        (err: AWSError, data: DocumentClient.GetItemOutput) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(data.Item as ICategory);\n        },\n      );\n    });\n  }\n\n  getPostById(postId: string): Promise {\n    return new Promise((resolve, reject) => {\n      this.dbClient().get(\n        {\n          TableName: TableName('posts'),\n          Key: {\n            id: postId,\n          },\n        },\n        (err: AWSError, data: DocumentClient.GetItemOutput) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(data.Item as IPost);\n        },\n      );\n    });\n  }\n\n  // Aws SDK docs\n  // https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/dynamodb-example-query-scan.html\n  listMainCategories(): Promise {\n    return new Promise((resolve, reject) => {\n      // Query operators on Dynamodb\n      // https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Expressions.OperatorsAndFunctions.html\n      this.dbClient().scan(\n        {\n          TableName: TableName('categories'),\n          FilterExpression:\n            'attribute_not_exists(parentId) or parentId = :empty',\n          ExpressionAttributeValues: {\n            ':empty': null,\n          },\n        },\n        (err: AWSError, data: DocumentClient.QueryOutput) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          /***********************************\n           * data:\n           * {\n           *   Items: [{id: '1', title: 'Category 1',...}],\n           *   Count: 1,\n           *   ScannedCount: 1\n           * }\n           */\n          resolve(data.Items as ICategory[]);\n        },\n      );\n    });\n  }\n\n  listSubcategories(categoryId: string): Promise {\n    return new Promise((resolve, reject) => {\n      this.dbClient().query(\n        {\n          TableName: TableName('categories'),\n          IndexName: 'WithParentId',\n          KeyConditionExpression: 'parentId = :parentId',\n          ExpressionAttributeValues: {\n            ':parentId': categoryId,\n          },\n        },\n        (err: AWSError, data: DocumentClient.QueryOutput) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(data.Items as ICategory[]);\n        },\n      );\n    });\n  }\n\n  listPostsByCategoryId(categoryId: string): Promise {\n    return new Promise((resolve, reject) => {\n      this.dbClient().query(\n        {\n          TableName: TableName('posts'),\n          IndexName: 'WithCategoryId',\n          KeyConditionExpression: 'categoryId = :categoryId',\n          ExpressionAttributeValues: {\n            ':categoryId': categoryId,\n          },\n        },\n        (err: AWSError, data: DocumentClient.QueryOutput) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(data.Items as IPost[]);\n        },\n      );\n    });\n  }\n\n  listPostComments(postId: string): Promise {\n    return new Promise((resolve, reject) => {\n      this.dbClient().query(\n        {\n          TableName: TableName('comments'),\n          IndexName: 'WithPostId',\n          KeyConditionExpression: 'postId = :postId',\n          ExpressionAttributeValues: {\n            ':postId': postId,\n          },\n          Select: 'ALL_ATTRIBUTES',\n        },\n        (err: AWSError, data: DocumentClient.QueryOutput) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(data.Items as IPostComment[]);\n        },\n      );\n    });\n  }\n\n  createPost(payload: ICreatePost_Request): Promise {\n    return new Promise((resolve, reject) => {\n      const { createdBy, title, excerpt, content, categoryId } = payload;\n\n      const post: IPost = {\n        id: uuidv4(),\n        commentsCount: 0,\n        createdAt: new Date().toISOString(),\n        postType: 'post',\n        postState: 'open',\n        createdBy,\n        title,\n        excerpt,\n        content,\n        categoryId,\n      };\n\n      this.dbClient().put(\n        {\n          TableName: TableName('posts'),\n          Item: this.police.sanitizePost(post),\n        },\n        (err: AWSError) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(post);\n        },\n      );\n    });\n  }\n\n  updatePost(payload: IUpdatePost_Request): Promise {\n    return new Promise(async (resolve, reject) => {\n      const post = await this.getPostById(payload.id);\n\n      if (String(post.createdBy) !== String(payload.createdBy)) {\n        // @TODO ~ Throw correct error\n        reject(new Error(`Invalid author`));\n      }\n\n      post.title = defaultValue(payload.title, post.title, false);\n      post.excerpt = defaultValue(payload.excerpt, post.excerpt, false);\n      post.postType = defaultValue(payload.postType, post.postType, false);\n      post.postState = defaultValue(payload.postState, post.postState, false);\n      post.content = defaultValue(payload.content, post.content, false);\n\n      const Item = this.police.sanitizePost(post);\n\n      this.dbClient().put(\n        {\n          TableName: TableName('posts'),\n          Item,\n        },\n        (err: AWSError) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(Item);\n        },\n      );\n    });\n  }\n\n  createPostComment(\n    payload: ICreatePostComment_Request,\n  ): Promise {\n    return new Promise((resolve, reject) => {\n      const { postId, parentId, createdBy, content } = payload;\n\n      const comment: IPostComment = {\n        id: uuidv4(),\n        postId,\n        parentId,\n        createdBy,\n        content,\n        createdAt: new Date().toISOString(),\n      };\n\n      const Item = this.police.sanitizePostComment(comment);\n\n      this.dbClient().put(\n        {\n          TableName: TableName('comments'),\n          Item,\n        },\n        (err: AWSError) => {\n          if (err) {\n            reject(err);\n            return;\n          }\n          resolve(comment);\n        },\n      );\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ForumService.html":{"url":"injectables/ForumService.html","title":"injectable - ForumService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ForumService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/forum/forum.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createPost\n                            \n                            \n                                    Async\n                                createPostComment\n                            \n                            \n                                    Async\n                                createPostReaction\n                            \n                            \n                                    Async\n                                getCategory\n                            \n                            \n                                    Async\n                                getPost\n                            \n                            \n                                    Async\n                                listMainCategories\n                            \n                            \n                                    Async\n                                listPosts\n                            \n                            \n                                    Async\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ForumRepository)\n                    \n                \n                        \n                            \n                                Defined in src/forum/forum.service.ts:24\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ForumRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createPost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPost(payload: ICreatePost_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createPostComment\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPostComment(payload: ICreatePostComment_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePostComment_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createPostReaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createPostReaction(payload: ICreatePostReaction_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            ICreatePostReaction_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategory(payload: IGetCategory_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IGetCategory_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getPost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getPost(payload: IGetPost_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IGetPost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            listMainCategories\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    listMainCategories()\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            listPosts\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    listPosts(payload: IListPosts_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IListPosts_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updatePost\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updatePost(payload: IUpdatePost_Request)\n                \n            \n\n\n            \n                \n                    Defined in src/forum/forum.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                            IUpdatePost_Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { DocumentClient } from 'aws-sdk/clients/dynamodb';\nimport { ICategory, IGetCategory_Request, IGetCategory_Response, IPost, IPostType } from 'msforum-grpc';\nimport {\n  ICreatePostComment_Request,\n  ICreatePostComment_Response,\n  ICreatePostReaction_Request,\n  ICreatePostReaction_Response,\n  ICreatePost_Request,\n  ICreatePost_Response,\n  IGetPost_Request,\n  IGetPost_Response,\n  IListMainCategories_Response,\n  IListPosts_Request,\n  IListPosts_Response,\n  IUpdatePost_Request,\n  IUpdatePost_Response,\n} from 'msforum-grpc';\nimport { ForumRepository } from './forum.repository';\n\n@Injectable()\nexport class ForumService {\n  constructor(\n    private readonly repository: ForumRepository,\n  ) {}\n\n  async listMainCategories(): Promise {\n    const categories = await this.repository.listMainCategories();\n\n    return {\n      categories,\n    };\n  }\n\n  async getCategory(\n    payload: IGetCategory_Request,\n  ): Promise {\n    const category = await this.repository.getCategoryById(payload.categoryId);\n    const subcategories = await this.repository.listSubcategories(String(category.id));\n    const posts = await this.repository.listPostsByCategoryId(String(category.id));\n\n    return await Promise.resolve({\n      category,\n      subcategories,\n      posts,\n    });\n  }\n\n  async listPosts(payload: IListPosts_Request): Promise {\n    const posts = await this.repository.listPostsByCategoryId(String(payload.categoryId));\n    \n    return {\n      posts,\n    };\n  }\n\n  async getPost(\n    payload: IGetPost_Request,\n  ): Promise {\n    const post = await this.repository.getPostById(payload.postId);\n    const category = await this.repository.getCategoryById(post.categoryId);\n    const comments = await this.repository.listPostComments(post.id);\n\n    return await Promise.resolve({\n      post,\n      category,\n      comments,\n      // @TODO ~ reactions\n      reactions: [],\n    });\n  }\n\n  async createPost(\n    payload: ICreatePost_Request,\n  ): Promise {\n    return await this.repository.createPost(payload);\n  }\n\n  async createPostComment(\n    payload: ICreatePostComment_Request,\n  ): Promise {\n    return await this.repository.createPostComment(payload);\n  }\n\n  async createPostReaction(\n    payload: ICreatePostReaction_Request,\n  ): Promise {\n    return await Promise.resolve(null);\n  }\n\n  async updatePost(\n    payload: IUpdatePost_Request,\n  ): Promise {\n    return await this.repository.updatePost(payload);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/dynamodb/__mocks__/dynamodb.service.mock.ts\n            \n            class\n            DynamodbServiceMock\n            \n                0 %\n                (0/14)\n            \n        \n        \n            \n                \n                src/dynamodb/dynamodb.service.ts\n            \n            injectable\n            DynamodbService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/dynamodb/dynamodb.utils.ts\n            \n            variable\n            TableName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/forum/forum.controller.ts\n            \n            controller\n            ForumController\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/forum/forum.mock.ts\n            \n            variable\n            categoryList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/forum/forum.mock.ts\n            \n            variable\n            postList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/forum/forum.police.ts\n            \n            injectable\n            ForumPolice\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/forum/forum.repository.ts\n            \n            injectable\n            ForumRepository\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/forum/forum.service.ts\n            \n            injectable\n            ForumService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/grpc.options.ts\n            \n            variable\n            microserviceOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            allowedEnvNames\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            logger\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            defaultValue\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            requiredEnvs\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws/dynamodb-data-mapper : ^0.7.3\n        \n            @aws/dynamodb-data-mapper-annotations : ^0.7.3\n        \n            @grpc/proto-loader : ^0.6.1\n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/microservices : ^7.6.15\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            aws-sdk : ^2.890.0\n        \n            grpc : ^1.24.6\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ERRLEVEL   (src/.../dynamodb.service.mock.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/dynamodb/__mocks__/dynamodb.service.mock.ts\n    \n        \n            \n                \n                    \n                        \n                        ERRLEVEL\n                    \n                \n                        \n                            \n                                 none\n                            \n                        \n                        \n                            \n                                 all\n                            \n                        \n                        \n                            \n                                 get\n                            \n                        \n                        \n                            \n                                 scan\n                            \n                        \n                        \n                            \n                                 query\n                            \n                        \n                        \n                            \n                                 put\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            defaultValue   (src/.../utils.ts)\n                        \n                        \n                            requiredEnvs   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            defaultValue\n                        \n                        \n                    \n                \n            \n            \n                \ndefaultValue(value: any, defaultValue: any, preserveFalsy: boolean)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    defaultValue\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    preserveFalsy\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            requiredEnvs\n                        \n                        \n                    \n                \n            \n            \n                \nrequiredEnvs(envNames)\n                \n            \n\n\n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    envNames\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nmsforum-grpc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 MicroEnv\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DynamodbModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ForumModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_DynamodbModule\n\n\n\ncluster_DynamodbModule_exports\n\n\n\ncluster_DynamodbModule_providers\n\n\n\ncluster_ForumModule\n\n\n\ncluster_ForumModule_providers\n\n\n\n\nDynamodbModule\n\nDynamodbModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nDynamodbModule->AppModule\n\n\n\n\n\nDynamodbService \n\nDynamodbService \n\nDynamodbService  -->\n\nDynamodbModule->DynamodbService \n\n\n\n\n\nForumModule\n\nForumModule\n\nAppModule -->\n\nForumModule->AppModule\n\n\n\n\n\nDynamodbService\n\nDynamodbService\n\nDynamodbModule -->\n\nDynamodbService->DynamodbModule\n\n\n\n\n\nForumPolice\n\nForumPolice\n\nForumModule -->\n\nForumPolice->ForumModule\n\n\n\n\n\nForumRepository\n\nForumRepository\n\nForumModule -->\n\nForumRepository->ForumModule\n\n\n\n\n\nForumService\n\nForumService\n\nForumModule -->\n\nForumService->ForumModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Class\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            allowedEnvNames   (src/.../main.ts)\n                        \n                        \n                            categoryList   (src/.../forum.mock.ts)\n                        \n                        \n                            logger   (src/.../main.ts)\n                        \n                        \n                            microserviceOptions   (src/.../grpc.options.ts)\n                        \n                        \n                            postList   (src/.../forum.mock.ts)\n                        \n                        \n                            TableName   (src/.../dynamodb.utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            allowedEnvNames\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : ['local', 'production']\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('Main')\n                        \n                    \n\n\n            \n        \n\n    src/forum/forum.mock.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            categoryList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IListMainCategories_Response\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  categories: [\n    {\n      id: '1',\n      title: 'Category 1 title',\n      description: 'Category 1 description',\n      postsCount: 101,\n      createdAt: new Date().toISOString(),\n      parentId: null,\n    },\n    {\n      id: '2',\n      title: 'Category 2 title',\n      description: 'Category 2 description',\n      postsCount: 102,\n      createdAt: new Date().toISOString(),\n      parentId: null,\n    },\n    {\n      id: '3',\n      title: 'Category 3 title',\n      description: 'Category 3 description',\n      postsCount: 103,\n      createdAt: new Date().toISOString(),\n      parentId: null,\n    },\n    {\n      id: '4',\n      title: 'Sub-Category #1',\n      description: 'This category is inside Category 1',\n      postsCount: 2,\n      createdAt: new Date().toISOString(),\n      parentId: '1',\n    },\n  ],\n}\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            postList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     IPostList\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  posts: [\n    {\n      id: '1',\n      categoryId: '1',\n      createdBy: 'user1',\n      createdAt: new Date().toISOString(),\n      commentsCount: 3,\n      title: 'Post 1',\n      excerpt: 'Excerpt from the post',\n      postType: 'post',\n      postState: 'open',\n      updatedAt: null,\n      content: 'Full content of the post',\n    },\n    {\n      id: '2',\n      categoryId: '1',\n      createdBy: 'user1',\n      createdAt: new Date().toISOString(),\n      commentsCount: 3,\n      title: 'Post 2',\n      excerpt: 'Excerpt from the post',\n      postType: 'post',\n      postState: 'open',\n      updatedAt: null,\n      content: 'Full content of the post',\n    },\n    {\n      id: '3',\n      categoryId: '2',\n      createdBy: 'user1',\n      createdAt: new Date().toISOString(),\n      commentsCount: 3,\n      title: 'Post 3',\n      excerpt: 'Excerpt from the post',\n      postType: 'post',\n      postState: 'open',\n      updatedAt: null,\n      content: 'Full content of the post',\n    },\n  ],\n}\n                        \n                    \n\n\n            \n        \n\n    src/grpc.options.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            microserviceOptions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     GrpcOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  transport: Transport.GRPC,\n  options: {\n    package: 'forum',\n    url: '0.0.0.0:3000',\n    protoPath: join(__dirname, '../msforum-grpc.proto'),\n  },\n}\n                        \n                    \n\n\n            \n        \n\n    src/dynamodb/dynamodb.utils.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TableName\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (tableName: string): string => {\n  let prefix = process.env.DYNAMODB_TABLES_PREFIX || '';\n\n  if (prefix && prefix.charAt(prefix.length - 1) !== '_') {\n    prefix += '_';\n  }\n\n  return `${prefix}${tableName}`;\n}\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
